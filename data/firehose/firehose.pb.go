// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firehose.proto

package firehose

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_core_data "github.com/ElrondNetwork/elrond-go-core/data"
	block "github.com/ElrondNetwork/elrond-go-core/data/block"
	receipt "github.com/ElrondNetwork/elrond-go-core/data/receipt"
	rewardTx "github.com/ElrondNetwork/elrond-go-core/data/rewardTx"
	smartContractResult "github.com/ElrondNetwork/elrond-go-core/data/smartContractResult"
	transaction "github.com/ElrondNetwork/elrond-go-core/data/transaction"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FirehoseShardBlock struct {
	ShardBlock          *block.ShardBlock                                   `protobuf:"bytes,1,opt,name=ShardBlock,proto3" json:"ShardBlock,omitempty"`
	HeaderHash          []byte                                              `protobuf:"bytes,2,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	AlteredAccounts     map[string]*AlteredAccount                          `protobuf:"bytes,3,rep,name=AlteredAccounts,proto3" json:"AlteredAccounts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Transactions        map[string]*TxWithFee                               `protobuf:"bytes,4,rep,name=Transactions,proto3" json:"Transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SmartContractResult map[string]*smartContractResult.SmartContractResult `protobuf:"bytes,5,rep,name=SmartContractResult,proto3" json:"SmartContractResult,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	//map<string, RewardTx> Rewards = 6;
	S        *rewardTx.RewardTx          `protobuf:"bytes,6,opt,name=s,proto3" json:"s,omitempty"`
	Receipts map[string]*receipt.Receipt `protobuf:"bytes,7,rep,name=Receipts,proto3" json:"Receipts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FirehoseShardBlock) Reset()      { *m = FirehoseShardBlock{} }
func (*FirehoseShardBlock) ProtoMessage() {}
func (*FirehoseShardBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_4efa697a0edbc17a, []int{0}
}
func (m *FirehoseShardBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirehoseShardBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FirehoseShardBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirehoseShardBlock.Merge(m, src)
}
func (m *FirehoseShardBlock) XXX_Size() int {
	return m.Size()
}
func (m *FirehoseShardBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FirehoseShardBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FirehoseShardBlock proto.InternalMessageInfo

func (m *FirehoseShardBlock) GetShardBlock() *block.ShardBlock {
	if m != nil {
		return m.ShardBlock
	}
	return nil
}

func (m *FirehoseShardBlock) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *FirehoseShardBlock) GetAlteredAccounts() map[string]*AlteredAccount {
	if m != nil {
		return m.AlteredAccounts
	}
	return nil
}

func (m *FirehoseShardBlock) GetTransactions() map[string]*TxWithFee {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *FirehoseShardBlock) GetSmartContractResult() map[string]*smartContractResult.SmartContractResult {
	if m != nil {
		return m.SmartContractResult
	}
	return nil
}

func (m *FirehoseShardBlock) GetS() *rewardTx.RewardTx {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *FirehoseShardBlock) GetReceipts() map[string]*receipt.Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

type AlteredAccount struct {
	Nonce   uint64              `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Balance string              `protobuf:"bytes,2,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Tokens  []*AccountTokenData `protobuf:"bytes,3,rep,name=Tokens,proto3" json:"Tokens,omitempty"`
}

func (m *AlteredAccount) Reset()      { *m = AlteredAccount{} }
func (*AlteredAccount) ProtoMessage() {}
func (*AlteredAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_4efa697a0edbc17a, []int{1}
}
func (m *AlteredAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AlteredAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AlteredAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AlteredAccount.Merge(m, src)
}
func (m *AlteredAccount) XXX_Size() int {
	return m.Size()
}
func (m *AlteredAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_AlteredAccount.DiscardUnknown(m)
}

var xxx_messageInfo_AlteredAccount proto.InternalMessageInfo

func (m *AlteredAccount) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AlteredAccount) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *AlteredAccount) GetTokens() []*AccountTokenData {
	if m != nil {
		return m.Tokens
	}
	return nil
}

type AccountTokenData struct {
	Nonce      uint64 `protobuf:"varint,1,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
	Identifier string `protobuf:"bytes,2,opt,name=Identifier,proto3" json:"Identifier,omitempty"`
	Balance    string `protobuf:"bytes,3,opt,name=Balance,proto3" json:"Balance,omitempty"`
	Properties string `protobuf:"bytes,4,opt,name=Properties,proto3" json:"Properties,omitempty"`
}

func (m *AccountTokenData) Reset()      { *m = AccountTokenData{} }
func (*AccountTokenData) ProtoMessage() {}
func (*AccountTokenData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4efa697a0edbc17a, []int{2}
}
func (m *AccountTokenData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountTokenData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *AccountTokenData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountTokenData.Merge(m, src)
}
func (m *AccountTokenData) XXX_Size() int {
	return m.Size()
}
func (m *AccountTokenData) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountTokenData.DiscardUnknown(m)
}

var xxx_messageInfo_AccountTokenData proto.InternalMessageInfo

func (m *AccountTokenData) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *AccountTokenData) GetIdentifier() string {
	if m != nil {
		return m.Identifier
	}
	return ""
}

func (m *AccountTokenData) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *AccountTokenData) GetProperties() string {
	if m != nil {
		return m.Properties
	}
	return ""
}

type TxWithFee struct {
	Transaction *transaction.Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
	FeeInfo     *FeeInfo                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"FeeInfo,omitempty"`
}

func (m *TxWithFee) Reset()      { *m = TxWithFee{} }
func (*TxWithFee) ProtoMessage() {}
func (*TxWithFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_4efa697a0edbc17a, []int{3}
}
func (m *TxWithFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxWithFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxWithFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxWithFee.Merge(m, src)
}
func (m *TxWithFee) XXX_Size() int {
	return m.Size()
}
func (m *TxWithFee) XXX_DiscardUnknown() {
	xxx_messageInfo_TxWithFee.DiscardUnknown(m)
}

var xxx_messageInfo_TxWithFee proto.InternalMessageInfo

func (m *TxWithFee) GetTransaction() *transaction.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TxWithFee) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

type FeeInfo struct {
	GasUsed        uint64        `protobuf:"varint,1,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Fee            *math_big.Int `protobuf:"bytes,2,opt,name=Fee,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"Fee,omitempty"`
	InitialPaidFee *math_big.Int `protobuf:"bytes,3,opt,name=InitialPaidFee,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"InitialPaidFee,omitempty"`
}

func (m *FeeInfo) Reset()      { *m = FeeInfo{} }
func (*FeeInfo) ProtoMessage() {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4efa697a0edbc17a, []int{4}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

func (m *FeeInfo) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *FeeInfo) GetFee() *math_big.Int {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *FeeInfo) GetInitialPaidFee() *math_big.Int {
	if m != nil {
		return m.InitialPaidFee
	}
	return nil
}

func init() {
	proto.RegisterType((*FirehoseShardBlock)(nil), "proto.FirehoseShardBlock")
	proto.RegisterMapType((map[string]*AlteredAccount)(nil), "proto.FirehoseShardBlock.AlteredAccountsEntry")
	proto.RegisterMapType((map[string]*receipt.Receipt)(nil), "proto.FirehoseShardBlock.ReceiptsEntry")
	proto.RegisterMapType((map[string]*smartContractResult.SmartContractResult)(nil), "proto.FirehoseShardBlock.SmartContractResultEntry")
	proto.RegisterMapType((map[string]*TxWithFee)(nil), "proto.FirehoseShardBlock.TransactionsEntry")
	proto.RegisterType((*AlteredAccount)(nil), "proto.AlteredAccount")
	proto.RegisterType((*AccountTokenData)(nil), "proto.AccountTokenData")
	proto.RegisterType((*TxWithFee)(nil), "proto.TxWithFee")
	proto.RegisterType((*FeeInfo)(nil), "proto.FeeInfo")
}

func init() { proto.RegisterFile("firehose.proto", fileDescriptor_4efa697a0edbc17a) }

var fileDescriptor_4efa697a0edbc17a = []byte{
	// 758 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0x33, 0x84, 0x04, 0x78, 0x61, 0x03, 0xcc, 0xb2, 0x5a, 0x2b, 0xd2, 0xce, 0xa2, 0x68,
	0xb5, 0x1b, 0x09, 0x11, 0xef, 0x66, 0x7b, 0xa8, 0xda, 0x13, 0x06, 0x52, 0x42, 0x25, 0x4a, 0x4d,
	0xaa, 0xb6, 0xa8, 0x97, 0x89, 0x3d, 0x49, 0xac, 0x04, 0x0f, 0x1d, 0x4f, 0x0a, 0xdc, 0xaa, 0xfe,
	0x05, 0xfd, 0x33, 0xaa, 0xfe, 0x0b, 0xfd, 0x07, 0x7a, 0xe4, 0xc8, 0xad, 0xc5, 0x5c, 0x7a, 0xe4,
	0xd2, 0x7b, 0x95, 0xb1, 0x9d, 0xd8, 0xf9, 0x71, 0x88, 0xd4, 0x93, 0xe7, 0xbd, 0x79, 0xef, 0xf3,
	0x26, 0xdf, 0xaf, 0x3d, 0x81, 0x7c, 0xd3, 0x11, 0xac, 0xcd, 0x3d, 0x56, 0x3e, 0x13, 0x5c, 0x72,
	0x9c, 0x51, 0x8f, 0xc2, 0x56, 0xcb, 0x91, 0xed, 0x5e, 0xa3, 0x6c, 0xf1, 0x53, 0xbd, 0xc5, 0x5b,
	0x5c, 0x57, 0xe9, 0x46, 0xaf, 0xa9, 0x22, 0x15, 0xa8, 0x55, 0xd0, 0x55, 0xa8, 0xc6, 0xca, 0xf7,
	0xba, 0x82, 0xbb, 0xf6, 0x21, 0x93, 0xe7, 0x5c, 0x74, 0x74, 0xa6, 0xa2, 0xad, 0x16, 0xdf, 0xb2,
	0xb8, 0x60, 0xba, 0x4d, 0x25, 0xd5, 0x1b, 0x5d, 0x6e, 0x75, 0xf4, 0x36, 0xa3, 0x36, 0x13, 0xdb,
	0xae, 0x6d, 0x70, 0xfb, 0x32, 0xe4, 0x1c, 0xcc, 0xc4, 0x91, 0x82, 0xba, 0x1e, 0xb5, 0xa4, 0xc3,
	0xdd, 0xf8, 0x3a, 0x64, 0x9d, 0xcc, 0xc4, 0xf2, 0x4e, 0xa9, 0x90, 0x3b, 0xdc, 0x95, 0x82, 0x5a,
	0xd2, 0x64, 0x5e, 0xaf, 0x2b, 0x27, 0xe5, 0x42, 0xb6, 0x31, 0x13, 0x5b, 0x30, 0x8b, 0x39, 0x67,
	0x32, 0x7a, 0x86, 0x8c, 0xdd, 0x19, 0x19, 0xe7, 0x54, 0xd8, 0xf5, 0x8b, 0xc1, 0x22, 0xa0, 0x14,
	0x3f, 0x65, 0x01, 0x57, 0x43, 0x0b, 0x8f, 0xdb, 0x54, 0xd8, 0x46, 0x5f, 0x5c, 0xfc, 0x1f, 0xc0,
	0x30, 0xd2, 0xd0, 0x06, 0x2a, 0xe5, 0x2a, 0x6b, 0x41, 0x4b, 0x79, 0xb8, 0x61, 0xc6, 0x8a, 0x30,
	0x01, 0xd8, 0x57, 0x96, 0xec, 0x53, 0xaf, 0xad, 0xcd, 0x6d, 0xa0, 0xd2, 0xb2, 0x19, 0xcb, 0xe0,
	0x17, 0xb0, 0xb2, 0xdd, 0x95, 0x4c, 0x30, 0x7b, 0xdb, 0xb2, 0x78, 0xcf, 0x95, 0x9e, 0x96, 0xde,
	0x48, 0x97, 0x72, 0x95, 0x72, 0xc8, 0x1d, 0x3f, 0x46, 0x79, 0xa4, 0x61, 0xcf, 0x95, 0xe2, 0xd2,
	0x1c, 0xc5, 0xe0, 0x27, 0xb0, 0x5c, 0x1f, 0xda, 0xe7, 0x69, 0xf3, 0x0a, 0xbb, 0x39, 0x1d, 0x1b,
	0xaf, 0x0e, 0x98, 0x09, 0x00, 0xb6, 0xe1, 0xd7, 0xe3, 0x71, 0xef, 0xb4, 0x8c, 0xe2, 0x56, 0xa6,
	0x73, 0x27, 0x34, 0x05, 0xf8, 0x49, 0x38, 0xfc, 0x07, 0x20, 0x4f, 0xcb, 0x2a, 0x69, 0x57, 0x42,
	0xa6, 0x19, 0x9a, 0x63, 0x22, 0x0f, 0xef, 0xc0, 0xa2, 0x19, 0x18, 0xee, 0x69, 0x0b, 0x6a, 0xf2,
	0x3f, 0xd3, 0x27, 0x47, 0x95, 0xc1, 0xb8, 0x41, 0x63, 0xe1, 0x25, 0xac, 0x4f, 0xd2, 0x10, 0xaf,
	0x42, 0xba, 0xc3, 0x2e, 0x95, 0xb1, 0x4b, 0x66, 0x7f, 0x89, 0x37, 0x21, 0xf3, 0x86, 0x76, 0x7b,
	0x4c, 0x39, 0x97, 0xab, 0xfc, 0x16, 0xce, 0x4a, 0x76, 0x9b, 0x41, 0xcd, 0x83, 0xb9, 0xfb, 0xa8,
	0xf0, 0x14, 0xd6, 0xc6, 0x74, 0x9c, 0xc0, 0xfd, 0x3b, 0xc9, 0x5d, 0x0d, 0xb9, 0xf5, 0x8b, 0xe7,
	0x8e, 0x6c, 0x57, 0x19, 0x8b, 0x23, 0x1b, 0xa0, 0x4d, 0x93, 0x70, 0x02, 0xf9, 0xdf, 0x24, 0xb9,
	0x10, 0xbd, 0x9e, 0xe3, 0x84, 0xf8, 0x8c, 0xc7, 0xf0, 0x4b, 0x42, 0xac, 0x09, 0xe0, 0xbf, 0x92,
	0xe0, 0xfc, 0xc0, 0x1c, 0xd5, 0x16, 0x83, 0x15, 0x5f, 0x43, 0x3e, 0x29, 0x10, 0x5e, 0x87, 0xcc,
	0x21, 0x77, 0x2d, 0xa6, 0x78, 0xf3, 0x66, 0x10, 0x60, 0x0d, 0x16, 0x0c, 0xda, 0xa5, 0xfd, 0xfc,
	0x9c, 0x9a, 0x13, 0x85, 0x58, 0x87, 0x6c, 0x9d, 0x77, 0x98, 0x1b, 0x7d, 0x0c, 0xbf, 0x47, 0xba,
	0x07, 0x3c, 0xb5, 0xb7, 0x4b, 0x25, 0x35, 0xc3, 0xb2, 0xe2, 0x3b, 0x04, 0xab, 0xa3, 0x9b, 0x53,
	0xa6, 0x12, 0x80, 0x9a, 0xcd, 0x5c, 0xe9, 0x34, 0x1d, 0x26, 0xc2, 0xc1, 0xb1, 0x4c, 0xfc, 0x54,
	0xe9, 0xe4, 0xa9, 0x08, 0xc0, 0x91, 0xe0, 0x67, 0x4c, 0x48, 0x87, 0xf5, 0xbf, 0x27, 0xd5, 0x39,
	0xcc, 0x14, 0x3b, 0xb0, 0x34, 0x30, 0x10, 0xdf, 0x83, 0x5c, 0xec, 0x45, 0x08, 0x2f, 0x0b, 0x1c,
	0xf9, 0x3c, 0xdc, 0x31, 0xe3, 0x65, 0xb8, 0x04, 0x0b, 0x55, 0xc6, 0x6a, 0x6e, 0x93, 0x8f, 0xc8,
	0x1c, 0x66, 0xcd, 0x68, 0xbb, 0xf8, 0x1d, 0x0d, 0x4a, 0xfb, 0x47, 0x7e, 0x44, 0xbd, 0x67, 0x1e,
	0xb3, 0xc3, 0x9f, 0x1a, 0x85, 0xf8, 0x15, 0xa4, 0xab, 0x2c, 0x90, 0x77, 0xd9, 0x38, 0xf8, 0xf8,
	0xe5, 0xcf, 0xea, 0x29, 0x95, 0x6d, 0xbd, 0xe1, 0xb4, 0xca, 0x35, 0x57, 0x3e, 0x9c, 0xe5, 0xb2,
	0x2c, 0x1b, 0x4e, 0xab, 0xe6, 0xca, 0x1d, 0xea, 0x49, 0x26, 0xcc, 0x3e, 0x16, 0x0b, 0xc8, 0xd7,
	0x5c, 0x47, 0x3a, 0xb4, 0x7b, 0x44, 0x1d, 0xbb, 0x3f, 0x28, 0xfd, 0xd3, 0x07, 0x8d, 0x4c, 0x30,
	0x8c, 0xab, 0x1b, 0x92, 0xba, 0xbe, 0x21, 0xa9, 0xbb, 0x1b, 0x82, 0xde, 0xfa, 0x04, 0x7d, 0xf0,
	0x09, 0xfa, 0xec, 0x13, 0x74, 0xe5, 0x13, 0x74, 0xed, 0x13, 0xf4, 0xd5, 0x27, 0xe8, 0x9b, 0x4f,
	0x52, 0x77, 0x3e, 0x41, 0xef, 0x6f, 0x49, 0xea, 0xea, 0x96, 0xa4, 0xae, 0x6f, 0x49, 0xea, 0x64,
	0x31, 0xfa, 0x53, 0x6e, 0x64, 0x95, 0xa6, 0xff, 0xff, 0x08, 0x00, 0x00, 0xff, 0xff, 0xae, 0x32,
	0x6e, 0x28, 0xa7, 0x07, 0x00, 0x00,
}

func (this *FirehoseShardBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FirehoseShardBlock)
	if !ok {
		that2, ok := that.(FirehoseShardBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ShardBlock.Equal(that1.ShardBlock) {
		return false
	}
	if !bytes.Equal(this.HeaderHash, that1.HeaderHash) {
		return false
	}
	if len(this.AlteredAccounts) != len(that1.AlteredAccounts) {
		return false
	}
	for i := range this.AlteredAccounts {
		if !this.AlteredAccounts[i].Equal(that1.AlteredAccounts[i]) {
			return false
		}
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if len(this.SmartContractResult) != len(that1.SmartContractResult) {
		return false
	}
	for i := range this.SmartContractResult {
		if !this.SmartContractResult[i].Equal(that1.SmartContractResult[i]) {
			return false
		}
	}
	if !this.S.Equal(that1.S) {
		return false
	}
	if len(this.Receipts) != len(that1.Receipts) {
		return false
	}
	for i := range this.Receipts {
		if !this.Receipts[i].Equal(that1.Receipts[i]) {
			return false
		}
	}
	return true
}
func (this *AlteredAccount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AlteredAccount)
	if !ok {
		that2, ok := that.(AlteredAccount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if len(this.Tokens) != len(that1.Tokens) {
		return false
	}
	for i := range this.Tokens {
		if !this.Tokens[i].Equal(that1.Tokens[i]) {
			return false
		}
	}
	return true
}
func (this *AccountTokenData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AccountTokenData)
	if !ok {
		that2, ok := that.(AccountTokenData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Nonce != that1.Nonce {
		return false
	}
	if this.Identifier != that1.Identifier {
		return false
	}
	if this.Balance != that1.Balance {
		return false
	}
	if this.Properties != that1.Properties {
		return false
	}
	return true
}
func (this *TxWithFee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxWithFee)
	if !ok {
		that2, ok := that.(TxWithFee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	return true
}
func (this *FeeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeInfo)
	if !ok {
		that2, ok := that.(FeeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.Fee, that1.Fee) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.InitialPaidFee, that1.InitialPaidFee) {
			return false
		}
	}
	return true
}
func (this *FirehoseShardBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 11)
	s = append(s, "&firehose.FirehoseShardBlock{")
	if this.ShardBlock != nil {
		s = append(s, "ShardBlock: "+fmt.Sprintf("%#v", this.ShardBlock)+",\n")
	}
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	keysForAlteredAccounts := make([]string, 0, len(this.AlteredAccounts))
	for k, _ := range this.AlteredAccounts {
		keysForAlteredAccounts = append(keysForAlteredAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
	mapStringForAlteredAccounts := "map[string]*AlteredAccount{"
	for _, k := range keysForAlteredAccounts {
		mapStringForAlteredAccounts += fmt.Sprintf("%#v: %#v,", k, this.AlteredAccounts[k])
	}
	mapStringForAlteredAccounts += "}"
	if this.AlteredAccounts != nil {
		s = append(s, "AlteredAccounts: "+mapStringForAlteredAccounts+",\n")
	}
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxWithFee{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%#v: %#v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	if this.Transactions != nil {
		s = append(s, "Transactions: "+mapStringForTransactions+",\n")
	}
	keysForSmartContractResult := make([]string, 0, len(this.SmartContractResult))
	for k, _ := range this.SmartContractResult {
		keysForSmartContractResult = append(keysForSmartContractResult, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResult)
	mapStringForSmartContractResult := "map[string]*smartContractResult.SmartContractResult{"
	for _, k := range keysForSmartContractResult {
		mapStringForSmartContractResult += fmt.Sprintf("%#v: %#v,", k, this.SmartContractResult[k])
	}
	mapStringForSmartContractResult += "}"
	if this.SmartContractResult != nil {
		s = append(s, "SmartContractResult: "+mapStringForSmartContractResult+",\n")
	}
	if this.S != nil {
		s = append(s, "S: "+fmt.Sprintf("%#v", this.S)+",\n")
	}
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%#v: %#v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	if this.Receipts != nil {
		s = append(s, "Receipts: "+mapStringForReceipts+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AlteredAccount) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&firehose.AlteredAccount{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	if this.Tokens != nil {
		s = append(s, "Tokens: "+fmt.Sprintf("%#v", this.Tokens)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AccountTokenData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&firehose.AccountTokenData{")
	s = append(s, "Nonce: "+fmt.Sprintf("%#v", this.Nonce)+",\n")
	s = append(s, "Identifier: "+fmt.Sprintf("%#v", this.Identifier)+",\n")
	s = append(s, "Balance: "+fmt.Sprintf("%#v", this.Balance)+",\n")
	s = append(s, "Properties: "+fmt.Sprintf("%#v", this.Properties)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TxWithFee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&firehose.TxWithFee{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&firehose.FeeInfo{")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "InitialPaidFee: "+fmt.Sprintf("%#v", this.InitialPaidFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFirehose(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FirehoseShardBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirehoseShardBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirehoseShardBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Receipts) > 0 {
		keysForReceipts := make([]string, 0, len(m.Receipts))
		for k := range m.Receipts {
			keysForReceipts = append(keysForReceipts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
		for iNdEx := len(keysForReceipts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Receipts[string(keysForReceipts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehose(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForReceipts[iNdEx])
			copy(dAtA[i:], keysForReceipts[iNdEx])
			i = encodeVarintFirehose(dAtA, i, uint64(len(keysForReceipts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehose(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.S != nil {
		{
			size, err := m.S.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehose(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.SmartContractResult) > 0 {
		keysForSmartContractResult := make([]string, 0, len(m.SmartContractResult))
		for k := range m.SmartContractResult {
			keysForSmartContractResult = append(keysForSmartContractResult, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResult)
		for iNdEx := len(keysForSmartContractResult) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SmartContractResult[string(keysForSmartContractResult[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehose(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSmartContractResult[iNdEx])
			copy(dAtA[i:], keysForSmartContractResult[iNdEx])
			i = encodeVarintFirehose(dAtA, i, uint64(len(keysForSmartContractResult[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehose(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Transactions) > 0 {
		keysForTransactions := make([]string, 0, len(m.Transactions))
		for k := range m.Transactions {
			keysForTransactions = append(keysForTransactions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
		for iNdEx := len(keysForTransactions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Transactions[string(keysForTransactions[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehose(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTransactions[iNdEx])
			copy(dAtA[i:], keysForTransactions[iNdEx])
			i = encodeVarintFirehose(dAtA, i, uint64(len(keysForTransactions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehose(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.AlteredAccounts) > 0 {
		keysForAlteredAccounts := make([]string, 0, len(m.AlteredAccounts))
		for k := range m.AlteredAccounts {
			keysForAlteredAccounts = append(keysForAlteredAccounts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
		for iNdEx := len(keysForAlteredAccounts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.AlteredAccounts[string(keysForAlteredAccounts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehose(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForAlteredAccounts[iNdEx])
			copy(dAtA[i:], keysForAlteredAccounts[iNdEx])
			i = encodeVarintFirehose(dAtA, i, uint64(len(keysForAlteredAccounts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehose(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintFirehose(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ShardBlock != nil {
		{
			size, err := m.ShardBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehose(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AlteredAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AlteredAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AlteredAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirehose(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintFirehose(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintFirehose(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AccountTokenData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountTokenData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountTokenData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		i -= len(m.Properties)
		copy(dAtA[i:], m.Properties)
		i = encodeVarintFirehose(dAtA, i, uint64(len(m.Properties)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintFirehose(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Identifier) > 0 {
		i -= len(m.Identifier)
		copy(dAtA[i:], m.Identifier)
		i = encodeVarintFirehose(dAtA, i, uint64(len(m.Identifier)))
		i--
		dAtA[i] = 0x12
	}
	if m.Nonce != 0 {
		i = encodeVarintFirehose(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxWithFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxWithFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxWithFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehose(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehose(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.InitialPaidFee)
		i -= size
		if _, err := __caster.MarshalTo(m.InitialPaidFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFirehose(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.Fee)
		i -= size
		if _, err := __caster.MarshalTo(m.Fee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFirehose(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GasUsed != 0 {
		i = encodeVarintFirehose(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintFirehose(dAtA []byte, offset int, v uint64) int {
	offset -= sovFirehose(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FirehoseShardBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ShardBlock != nil {
		l = m.ShardBlock.Size()
		n += 1 + l + sovFirehose(uint64(l))
	}
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovFirehose(uint64(l))
	}
	if len(m.AlteredAccounts) > 0 {
		for k, v := range m.AlteredAccounts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehose(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehose(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehose(uint64(mapEntrySize))
		}
	}
	if len(m.Transactions) > 0 {
		for k, v := range m.Transactions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehose(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehose(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehose(uint64(mapEntrySize))
		}
	}
	if len(m.SmartContractResult) > 0 {
		for k, v := range m.SmartContractResult {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehose(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehose(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehose(uint64(mapEntrySize))
		}
	}
	if m.S != nil {
		l = m.S.Size()
		n += 1 + l + sovFirehose(uint64(l))
	}
	if len(m.Receipts) > 0 {
		for k, v := range m.Receipts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehose(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehose(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehose(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *AlteredAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovFirehose(uint64(m.Nonce))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovFirehose(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovFirehose(uint64(l))
		}
	}
	return n
}

func (m *AccountTokenData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovFirehose(uint64(m.Nonce))
	}
	l = len(m.Identifier)
	if l > 0 {
		n += 1 + l + sovFirehose(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovFirehose(uint64(l))
	}
	l = len(m.Properties)
	if l > 0 {
		n += 1 + l + sovFirehose(uint64(l))
	}
	return n
}

func (m *TxWithFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovFirehose(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovFirehose(uint64(l))
	}
	return n
}

func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasUsed != 0 {
		n += 1 + sovFirehose(uint64(m.GasUsed))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.Fee)
		n += 1 + l + sovFirehose(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.InitialPaidFee)
		n += 1 + l + sovFirehose(uint64(l))
	}
	return n
}

func sovFirehose(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFirehose(x uint64) (n int) {
	return sovFirehose(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FirehoseShardBlock) String() string {
	if this == nil {
		return "nil"
	}
	keysForAlteredAccounts := make([]string, 0, len(this.AlteredAccounts))
	for k, _ := range this.AlteredAccounts {
		keysForAlteredAccounts = append(keysForAlteredAccounts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAlteredAccounts)
	mapStringForAlteredAccounts := "map[string]*AlteredAccount{"
	for _, k := range keysForAlteredAccounts {
		mapStringForAlteredAccounts += fmt.Sprintf("%v: %v,", k, this.AlteredAccounts[k])
	}
	mapStringForAlteredAccounts += "}"
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxWithFee{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%v: %v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	keysForSmartContractResult := make([]string, 0, len(this.SmartContractResult))
	for k, _ := range this.SmartContractResult {
		keysForSmartContractResult = append(keysForSmartContractResult, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResult)
	mapStringForSmartContractResult := "map[string]*smartContractResult.SmartContractResult{"
	for _, k := range keysForSmartContractResult {
		mapStringForSmartContractResult += fmt.Sprintf("%v: %v,", k, this.SmartContractResult[k])
	}
	mapStringForSmartContractResult += "}"
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%v: %v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	s := strings.Join([]string{`&FirehoseShardBlock{`,
		`ShardBlock:` + strings.Replace(fmt.Sprintf("%v", this.ShardBlock), "ShardBlock", "block.ShardBlock", 1) + `,`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`AlteredAccounts:` + mapStringForAlteredAccounts + `,`,
		`Transactions:` + mapStringForTransactions + `,`,
		`SmartContractResult:` + mapStringForSmartContractResult + `,`,
		`S:` + strings.Replace(fmt.Sprintf("%v", this.S), "RewardTx", "rewardTx.RewardTx", 1) + `,`,
		`Receipts:` + mapStringForReceipts + `,`,
		`}`,
	}, "")
	return s
}
func (this *AlteredAccount) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForTokens := "[]*AccountTokenData{"
	for _, f := range this.Tokens {
		repeatedStringForTokens += strings.Replace(f.String(), "AccountTokenData", "AccountTokenData", 1) + ","
	}
	repeatedStringForTokens += "}"
	s := strings.Join([]string{`&AlteredAccount{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`Tokens:` + repeatedStringForTokens + `,`,
		`}`,
	}, "")
	return s
}
func (this *AccountTokenData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AccountTokenData{`,
		`Nonce:` + fmt.Sprintf("%v", this.Nonce) + `,`,
		`Identifier:` + fmt.Sprintf("%v", this.Identifier) + `,`,
		`Balance:` + fmt.Sprintf("%v", this.Balance) + `,`,
		`Properties:` + fmt.Sprintf("%v", this.Properties) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxWithFee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxWithFee{`,
		`Transaction:` + strings.Replace(fmt.Sprintf("%v", this.Transaction), "Transaction", "transaction.Transaction", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeeInfo{`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`InitialPaidFee:` + fmt.Sprintf("%v", this.InitialPaidFee) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFirehose(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FirehoseShardBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirehoseShardBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirehoseShardBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ShardBlock == nil {
				m.ShardBlock = &block.ShardBlock{}
			}
			if err := m.ShardBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AlteredAccounts == nil {
				m.AlteredAccounts = make(map[string]*AlteredAccount)
			}
			var mapkey string
			var mapvalue *AlteredAccount
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehose
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehose
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehose
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AlteredAccount{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehose(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehose
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AlteredAccounts[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transactions == nil {
				m.Transactions = make(map[string]*TxWithFee)
			}
			var mapkey string
			var mapvalue *TxWithFee
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehose
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehose
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehose
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxWithFee{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehose(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehose
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Transactions[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResult == nil {
				m.SmartContractResult = make(map[string]*smartContractResult.SmartContractResult)
			}
			var mapkey string
			var mapvalue *smartContractResult.SmartContractResult
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehose
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehose
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehose
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &smartContractResult.SmartContractResult{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehose(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehose
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SmartContractResult[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field S", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.S == nil {
				m.S = &rewardTx.RewardTx{}
			}
			if err := m.S.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipts == nil {
				m.Receipts = make(map[string]*receipt.Receipt)
			}
			var mapkey string
			var mapvalue *receipt.Receipt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehose
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehose
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehose
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehose
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehose
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &receipt.Receipt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehose(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehose
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Receipts[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AlteredAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AlteredAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AlteredAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, &AccountTokenData{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountTokenData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountTokenData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountTokenData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Identifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Identifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxWithFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxWithFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxWithFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &transaction.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehose
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Fee = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPaidFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehose
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehose
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.InitialPaidFee = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehose(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehose
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFirehose(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFirehose
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirehose
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFirehose
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFirehose
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFirehose
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFirehose        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFirehose          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFirehose = fmt.Errorf("proto: unexpected end of group")
)
