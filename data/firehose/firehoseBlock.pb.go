// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: firehoseBlock.proto

package firehose

import (
	bytes "bytes"
	fmt "fmt"
	github_com_ElrondNetwork_elrond_go_core_data "github.com/ElrondNetwork/elrond-go-core/data"
	alteredAccount "github.com/ElrondNetwork/elrond-go-core/data/alteredAccount"
	block "github.com/ElrondNetwork/elrond-go-core/data/block"
	receipt "github.com/ElrondNetwork/elrond-go-core/data/receipt"
	rewardTx "github.com/ElrondNetwork/elrond-go-core/data/rewardTx"
	smartContractResult "github.com/ElrondNetwork/elrond-go-core/data/smartContractResult"
	transaction "github.com/ElrondNetwork/elrond-go-core/data/transaction"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FirehoseBlock struct {
	HeaderBytes         []byte                           `protobuf:"bytes,1,opt,name=HeaderBytes,proto3" json:"HeaderBytes,omitempty"`
	HeaderType          string                           `protobuf:"bytes,2,opt,name=HeaderType,proto3" json:"HeaderType,omitempty"`
	HeaderHash          []byte                           `protobuf:"bytes,3,opt,name=HeaderHash,proto3" json:"HeaderHash,omitempty"`
	Body                *block.Body                      `protobuf:"bytes,4,opt,name=Body,proto3" json:"Body,omitempty"`
	AlteredAccounts     []*alteredAccount.AlteredAccount `protobuf:"bytes,5,rep,name=AlteredAccounts,proto3" json:"AlteredAccounts,omitempty"`
	Transactions        map[string]*TxWithFee            `protobuf:"bytes,6,rep,name=Transactions,proto3" json:"Transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SmartContractResult map[string]*SCRWithFee           `protobuf:"bytes,7,rep,name=SmartContractResult,proto3" json:"SmartContractResult,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rewards             map[string]*rewardTx.RewardTx    `protobuf:"bytes,8,rep,name=Rewards,proto3" json:"Rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Receipts            map[string]*receipt.Receipt      `protobuf:"bytes,9,rep,name=Receipts,proto3" json:"Receipts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InvalidTxs          map[string]*TxWithFee            `protobuf:"bytes,10,rep,name=InvalidTxs,proto3" json:"InvalidTxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs                []*transaction.Log               `protobuf:"bytes,11,rep,name=Logs,proto3" json:"Logs,omitempty"`
	SignersIndexes      []byte                           `protobuf:"bytes,12,opt,name=SignersIndexes,proto3" json:"SignersIndexes,omitempty"`
}

func (m *FirehoseBlock) Reset()      { *m = FirehoseBlock{} }
func (*FirehoseBlock) ProtoMessage() {}
func (*FirehoseBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd81671bd210eaed, []int{0}
}
func (m *FirehoseBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FirehoseBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FirehoseBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirehoseBlock.Merge(m, src)
}
func (m *FirehoseBlock) XXX_Size() int {
	return m.Size()
}
func (m *FirehoseBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_FirehoseBlock.DiscardUnknown(m)
}

var xxx_messageInfo_FirehoseBlock proto.InternalMessageInfo

func (m *FirehoseBlock) GetHeaderBytes() []byte {
	if m != nil {
		return m.HeaderBytes
	}
	return nil
}

func (m *FirehoseBlock) GetHeaderType() string {
	if m != nil {
		return m.HeaderType
	}
	return ""
}

func (m *FirehoseBlock) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *FirehoseBlock) GetBody() *block.Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *FirehoseBlock) GetAlteredAccounts() []*alteredAccount.AlteredAccount {
	if m != nil {
		return m.AlteredAccounts
	}
	return nil
}

func (m *FirehoseBlock) GetTransactions() map[string]*TxWithFee {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *FirehoseBlock) GetSmartContractResult() map[string]*SCRWithFee {
	if m != nil {
		return m.SmartContractResult
	}
	return nil
}

func (m *FirehoseBlock) GetRewards() map[string]*rewardTx.RewardTx {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *FirehoseBlock) GetReceipts() map[string]*receipt.Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *FirehoseBlock) GetInvalidTxs() map[string]*TxWithFee {
	if m != nil {
		return m.InvalidTxs
	}
	return nil
}

func (m *FirehoseBlock) GetLogs() []*transaction.Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *FirehoseBlock) GetSignersIndexes() []byte {
	if m != nil {
		return m.SignersIndexes
	}
	return nil
}

type FeeInfo struct {
	GasUsed        uint64        `protobuf:"varint,1,opt,name=GasUsed,proto3" json:"GasUsed,omitempty"`
	Fee            *math_big.Int `protobuf:"bytes,2,opt,name=Fee,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"Fee,omitempty"`
	InitialPaidFee *math_big.Int `protobuf:"bytes,3,opt,name=InitialPaidFee,proto3,casttypewith=math/big.Int;github.com/ElrondNetwork/elrond-go-core/data.BigIntCaster" json:"InitialPaidFee,omitempty"`
}

func (m *FeeInfo) Reset()      { *m = FeeInfo{} }
func (*FeeInfo) ProtoMessage() {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd81671bd210eaed, []int{1}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

func (m *FeeInfo) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *FeeInfo) GetFee() *math_big.Int {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *FeeInfo) GetInitialPaidFee() *math_big.Int {
	if m != nil {
		return m.InitialPaidFee
	}
	return nil
}

type TxWithFee struct {
	Transaction *transaction.Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"Transaction,omitempty"`
	FeeInfo     *FeeInfo                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"FeeInfo,omitempty"`
}

func (m *TxWithFee) Reset()      { *m = TxWithFee{} }
func (*TxWithFee) ProtoMessage() {}
func (*TxWithFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd81671bd210eaed, []int{2}
}
func (m *TxWithFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxWithFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxWithFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxWithFee.Merge(m, src)
}
func (m *TxWithFee) XXX_Size() int {
	return m.Size()
}
func (m *TxWithFee) XXX_DiscardUnknown() {
	xxx_messageInfo_TxWithFee.DiscardUnknown(m)
}

var xxx_messageInfo_TxWithFee proto.InternalMessageInfo

func (m *TxWithFee) GetTransaction() *transaction.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TxWithFee) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

type SCRWithFee struct {
	SmartContractResult *smartContractResult.SmartContractResult `protobuf:"bytes,1,opt,name=SmartContractResult,proto3" json:"SmartContractResult,omitempty"`
	FeeInfo             *FeeInfo                                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"FeeInfo,omitempty"`
}

func (m *SCRWithFee) Reset()      { *m = SCRWithFee{} }
func (*SCRWithFee) ProtoMessage() {}
func (*SCRWithFee) Descriptor() ([]byte, []int) {
	return fileDescriptor_bd81671bd210eaed, []int{3}
}
func (m *SCRWithFee) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCRWithFee) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SCRWithFee) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCRWithFee.Merge(m, src)
}
func (m *SCRWithFee) XXX_Size() int {
	return m.Size()
}
func (m *SCRWithFee) XXX_DiscardUnknown() {
	xxx_messageInfo_SCRWithFee.DiscardUnknown(m)
}

var xxx_messageInfo_SCRWithFee proto.InternalMessageInfo

func (m *SCRWithFee) GetSmartContractResult() *smartContractResult.SmartContractResult {
	if m != nil {
		return m.SmartContractResult
	}
	return nil
}

func (m *SCRWithFee) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

func init() {
	proto.RegisterType((*FirehoseBlock)(nil), "proto.FirehoseBlock")
	proto.RegisterMapType((map[string]*TxWithFee)(nil), "proto.FirehoseBlock.InvalidTxsEntry")
	proto.RegisterMapType((map[string]*receipt.Receipt)(nil), "proto.FirehoseBlock.ReceiptsEntry")
	proto.RegisterMapType((map[string]*rewardTx.RewardTx)(nil), "proto.FirehoseBlock.RewardsEntry")
	proto.RegisterMapType((map[string]*SCRWithFee)(nil), "proto.FirehoseBlock.SmartContractResultEntry")
	proto.RegisterMapType((map[string]*TxWithFee)(nil), "proto.FirehoseBlock.TransactionsEntry")
	proto.RegisterType((*FeeInfo)(nil), "proto.FeeInfo")
	proto.RegisterType((*TxWithFee)(nil), "proto.TxWithFee")
	proto.RegisterType((*SCRWithFee)(nil), "proto.SCRWithFee")
}

func init() { proto.RegisterFile("firehoseBlock.proto", fileDescriptor_bd81671bd210eaed) }

var fileDescriptor_bd81671bd210eaed = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x4f, 0x4f, 0x3b, 0x45,
	0x18, 0xc7, 0xbb, 0xbf, 0x96, 0x5f, 0xdb, 0xd9, 0xfe, 0xf8, 0x33, 0xc4, 0x64, 0xd3, 0xc3, 0x50,
	0x1b, 0xc4, 0x5e, 0xda, 0x26, 0xd5, 0x83, 0x91, 0x04, 0xc3, 0x02, 0x95, 0x22, 0x51, 0x1c, 0x6a,
	0x8c, 0xc4, 0xc4, 0x4c, 0x77, 0x87, 0xed, 0xa6, 0xcb, 0x0e, 0x99, 0x99, 0x42, 0x7b, 0xf3, 0xe0,
	0x0b, 0xf0, 0x45, 0x78, 0x30, 0xbe, 0x12, 0x8f, 0x1c, 0xb9, 0x29, 0xcb, 0xc5, 0x23, 0x17, 0xef,
	0xa6, 0xb3, 0xdb, 0x76, 0xb7, 0x2c, 0x89, 0x45, 0x2f, 0xec, 0x3c, 0x7f, 0xbe, 0x9f, 0x67, 0x66,
	0x9e, 0x87, 0x49, 0xc1, 0xe6, 0xa5, 0xcb, 0x69, 0x9f, 0x09, 0x6a, 0x7a, 0xcc, 0x1a, 0x34, 0xae,
	0x39, 0x93, 0x0c, 0xae, 0xa8, 0x4f, 0xb9, 0xee, 0xb8, 0xb2, 0x3f, 0xec, 0x35, 0x2c, 0x76, 0xd5,
	0x74, 0x98, 0xc3, 0x9a, 0xca, 0xdd, 0x1b, 0x5e, 0x2a, 0x4b, 0x19, 0x6a, 0x15, 0xaa, 0xca, 0x7b,
	0xb1, 0xf4, 0x23, 0x8f, 0x33, 0xdf, 0xfe, 0x92, 0xca, 0x5b, 0xc6, 0x07, 0x4d, 0xaa, 0xac, 0xba,
	0xc3, 0xea, 0x16, 0xe3, 0xb4, 0x69, 0x13, 0x49, 0x9a, 0xbd, 0x49, 0xbd, 0xf0, 0x6f, 0xa4, 0x37,
	0x97, 0xd2, 0x4b, 0x4e, 0x7c, 0x41, 0x2c, 0xe9, 0x32, 0xbf, 0xe9, 0x31, 0x27, 0x62, 0x9c, 0xbc,
	0x9a, 0x11, 0x5b, 0x47, 0xac, 0x8b, 0xa5, 0x58, 0xe2, 0x8a, 0x70, 0x79, 0xc0, 0x7c, 0xc9, 0x89,
	0x25, 0x31, 0x15, 0x43, 0x4f, 0xa6, 0xf9, 0x5e, 0x75, 0x56, 0x4e, 0x2d, 0xea, 0x5e, 0xcb, 0xe9,
	0x37, 0x62, 0x1c, 0x2e, 0xc9, 0xb8, 0x25, 0xdc, 0xee, 0x8e, 0x66, 0x8b, 0x88, 0x72, 0xb6, 0x14,
	0x85, 0x78, 0x92, 0x72, 0x6a, 0xef, 0x5b, 0x16, 0x1b, 0xfa, 0x72, 0xc1, 0x0c, 0x89, 0xd5, 0x5f,
	0x0a, 0xe0, 0x5d, 0x3b, 0x3e, 0x55, 0xb0, 0x02, 0xf4, 0x63, 0x4a, 0x6c, 0xca, 0xcd, 0xb1, 0xa4,
	0xc2, 0xd0, 0x2a, 0x5a, 0xad, 0x84, 0xe3, 0x2e, 0x88, 0x00, 0x08, 0xcd, 0xee, 0xf8, 0x9a, 0x1a,
	0x6f, 0x2a, 0x5a, 0xad, 0x88, 0x63, 0x9e, 0x79, 0xfc, 0x98, 0x88, 0xbe, 0x91, 0x55, 0x80, 0x98,
	0x07, 0x6e, 0x81, 0x9c, 0xc9, 0xec, 0xb1, 0x91, 0xab, 0x68, 0x35, 0xbd, 0xa5, 0x87, 0x3b, 0x69,
	0x4c, 0x5c, 0x58, 0x05, 0xe0, 0x67, 0x60, 0x6d, 0x3f, 0xb1, 0x59, 0x61, 0xac, 0x54, 0xb2, 0x35,
	0xbd, 0xf5, 0x5e, 0x94, 0x9b, 0x8c, 0xe2, 0xc5, 0x6c, 0x78, 0x02, 0x4a, 0xdd, 0xf9, 0x88, 0x08,
	0xe3, 0xad, 0x52, 0xef, 0x44, 0xea, 0xc4, 0x79, 0x1b, 0xf1, 0xc4, 0x23, 0x5f, 0xf2, 0x31, 0x4e,
	0x68, 0xe1, 0x0f, 0x60, 0xf3, 0xfc, 0xf9, 0x68, 0x18, 0x79, 0x85, 0xac, 0xa7, 0x22, 0x53, 0xf2,
	0x43, 0x72, 0x1a, 0x09, 0xee, 0x82, 0x3c, 0x56, 0x6d, 0x16, 0x46, 0x41, 0x41, 0xdf, 0x4f, 0x85,
	0x46, 0x39, 0x21, 0x68, 0xaa, 0x80, 0x7b, 0xa0, 0x80, 0xc3, 0x41, 0x13, 0x46, 0x51, 0xa9, 0xab,
	0x2f, 0xa8, 0xc3, 0xa4, 0x50, 0x3e, 0xd3, 0xc0, 0x43, 0x00, 0x3a, 0xfe, 0x0d, 0xf1, 0x5c, 0xbb,
	0x3b, 0x12, 0x06, 0x50, 0x84, 0xed, 0x54, 0xc2, 0x3c, 0x2d, 0x64, 0xc4, 0x74, 0x10, 0x81, 0xdc,
	0x29, 0x73, 0x84, 0xa1, 0x2b, 0x3d, 0x88, 0xf4, 0xa7, 0xcc, 0xc1, 0xca, 0x0f, 0x77, 0xc0, 0xea,
	0xb9, 0xeb, 0xf8, 0x94, 0x8b, 0x8e, 0x6f, 0xd3, 0x11, 0x15, 0x46, 0x49, 0x4d, 0xc5, 0x82, 0xb7,
	0xfc, 0x35, 0xd8, 0x78, 0xd6, 0x0e, 0xb8, 0x0e, 0xb2, 0x03, 0x3a, 0x56, 0x83, 0x58, 0xc4, 0x93,
	0x25, 0xdc, 0x01, 0x2b, 0x37, 0xc4, 0x1b, 0x86, 0xb3, 0xa7, 0xb7, 0xd6, 0xa3, 0x7a, 0xdd, 0xd1,
	0xb7, 0xae, 0xec, 0xb7, 0x29, 0xc5, 0x61, 0xf8, 0xd3, 0x37, 0x9f, 0x68, 0xe5, 0xef, 0x80, 0xf1,
	0x52, 0x3b, 0x52, 0xc8, 0x1f, 0x26, 0xc9, 0x1b, 0x11, 0xf9, 0xfc, 0x00, 0xa7, 0xa0, 0xbf, 0x00,
	0xa5, 0x78, 0x53, 0x52, 0x70, 0x1f, 0x24, 0x71, 0x6b, 0x11, 0x0e, 0x47, 0xff, 0xd5, 0x49, 0xd8,
	0xbb, 0x44, 0x8f, 0x52, 0x68, 0xdb, 0x49, 0xda, 0xea, 0x8c, 0xa6, 0x64, 0x71, 0xd8, 0x57, 0x60,
	0x6d, 0xa1, 0x5d, 0xff, 0xed, 0x16, 0xab, 0x7f, 0x6b, 0x20, 0xdf, 0xa6, 0xb4, 0xe3, 0x5f, 0x32,
	0x68, 0x80, 0xfc, 0xe7, 0x44, 0x7c, 0x23, 0xa8, 0xad, 0x68, 0x39, 0x3c, 0x35, 0xe1, 0xf7, 0x20,
	0xdb, 0xa6, 0x21, 0xaf, 0x64, 0x9e, 0xfc, 0xf6, 0xc7, 0x56, 0xfb, 0x8a, 0xc8, 0x7e, 0xb3, 0xe7,
	0x3a, 0x8d, 0x8e, 0x2f, 0x77, 0x97, 0x79, 0xbc, 0x1a, 0xa6, 0xeb, 0x74, 0x7c, 0x79, 0x40, 0x84,
	0xa4, 0x1c, 0x4f, 0xb0, 0x90, 0x83, 0xd5, 0x8e, 0xef, 0x4a, 0x97, 0x78, 0x67, 0xc4, 0xb5, 0x27,
	0x85, 0xb2, 0xff, 0x7b, 0xa1, 0x85, 0x0a, 0xd5, 0x01, 0x28, 0xce, 0xee, 0x03, 0x7e, 0x0c, 0xf4,
	0xd8, 0x74, 0xaa, 0xc3, 0xeb, 0x2d, 0x38, 0xbd, 0xb6, 0x79, 0x04, 0xc7, 0xd3, 0x60, 0x6d, 0x76,
	0x73, 0x0b, 0x7d, 0x8b, 0xbc, 0x78, 0x1a, 0xae, 0xfe, 0xa4, 0x01, 0x30, 0x9f, 0x34, 0x78, 0x9a,
	0xfe, 0xf0, 0x84, 0x65, 0xcb, 0xd3, 0xc9, 0x7c, 0x9e, 0x91, 0xfe, 0xca, 0xfc, 0xeb, 0x6d, 0x98,
	0xe6, 0xdd, 0x03, 0xca, 0xdc, 0x3f, 0xa0, 0xcc, 0xd3, 0x03, 0xd2, 0x7e, 0x0c, 0x90, 0xf6, 0x6b,
	0x80, 0xb4, 0xdf, 0x03, 0xa4, 0xdd, 0x05, 0x48, 0xbb, 0x0f, 0x90, 0xf6, 0x67, 0x80, 0xb4, 0xbf,
	0x02, 0x94, 0x79, 0x0a, 0x90, 0xf6, 0xf3, 0x23, 0xca, 0xdc, 0x3d, 0xa2, 0xcc, 0xfd, 0x23, 0xca,
	0x5c, 0x14, 0xa6, 0xbf, 0x4f, 0x7a, 0x6f, 0x15, 0xfb, 0xa3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x61, 0x00, 0xdf, 0xd9, 0xb2, 0x08, 0x00, 0x00,
}

func (this *FirehoseBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FirehoseBlock)
	if !ok {
		that2, ok := that.(FirehoseBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HeaderBytes, that1.HeaderBytes) {
		return false
	}
	if this.HeaderType != that1.HeaderType {
		return false
	}
	if !bytes.Equal(this.HeaderHash, that1.HeaderHash) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if len(this.AlteredAccounts) != len(that1.AlteredAccounts) {
		return false
	}
	for i := range this.AlteredAccounts {
		if !this.AlteredAccounts[i].Equal(that1.AlteredAccounts[i]) {
			return false
		}
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if len(this.SmartContractResult) != len(that1.SmartContractResult) {
		return false
	}
	for i := range this.SmartContractResult {
		if !this.SmartContractResult[i].Equal(that1.SmartContractResult[i]) {
			return false
		}
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	if len(this.Receipts) != len(that1.Receipts) {
		return false
	}
	for i := range this.Receipts {
		if !this.Receipts[i].Equal(that1.Receipts[i]) {
			return false
		}
	}
	if len(this.InvalidTxs) != len(that1.InvalidTxs) {
		return false
	}
	for i := range this.InvalidTxs {
		if !this.InvalidTxs[i].Equal(that1.InvalidTxs[i]) {
			return false
		}
	}
	if len(this.Logs) != len(that1.Logs) {
		return false
	}
	for i := range this.Logs {
		if !this.Logs[i].Equal(that1.Logs[i]) {
			return false
		}
	}
	if !bytes.Equal(this.SignersIndexes, that1.SignersIndexes) {
		return false
	}
	return true
}
func (this *FeeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeInfo)
	if !ok {
		that2, ok := that.(FeeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.Fee, that1.Fee) {
			return false
		}
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		if !__caster.Equal(this.InitialPaidFee, that1.InitialPaidFee) {
			return false
		}
	}
	return true
}
func (this *TxWithFee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxWithFee)
	if !ok {
		that2, ok := that.(TxWithFee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	return true
}
func (this *SCRWithFee) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SCRWithFee)
	if !ok {
		that2, ok := that.(SCRWithFee)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmartContractResult.Equal(that1.SmartContractResult) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	return true
}
func (this *FirehoseBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 16)
	s = append(s, "&firehose.FirehoseBlock{")
	s = append(s, "HeaderBytes: "+fmt.Sprintf("%#v", this.HeaderBytes)+",\n")
	s = append(s, "HeaderType: "+fmt.Sprintf("%#v", this.HeaderType)+",\n")
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	if this.AlteredAccounts != nil {
		s = append(s, "AlteredAccounts: "+fmt.Sprintf("%#v", this.AlteredAccounts)+",\n")
	}
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxWithFee{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%#v: %#v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	if this.Transactions != nil {
		s = append(s, "Transactions: "+mapStringForTransactions+",\n")
	}
	keysForSmartContractResult := make([]string, 0, len(this.SmartContractResult))
	for k, _ := range this.SmartContractResult {
		keysForSmartContractResult = append(keysForSmartContractResult, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResult)
	mapStringForSmartContractResult := "map[string]*SCRWithFee{"
	for _, k := range keysForSmartContractResult {
		mapStringForSmartContractResult += fmt.Sprintf("%#v: %#v,", k, this.SmartContractResult[k])
	}
	mapStringForSmartContractResult += "}"
	if this.SmartContractResult != nil {
		s = append(s, "SmartContractResult: "+mapStringForSmartContractResult+",\n")
	}
	keysForRewards := make([]string, 0, len(this.Rewards))
	for k, _ := range this.Rewards {
		keysForRewards = append(keysForRewards, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
	mapStringForRewards := "map[string]*rewardTx.RewardTx{"
	for _, k := range keysForRewards {
		mapStringForRewards += fmt.Sprintf("%#v: %#v,", k, this.Rewards[k])
	}
	mapStringForRewards += "}"
	if this.Rewards != nil {
		s = append(s, "Rewards: "+mapStringForRewards+",\n")
	}
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%#v: %#v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	if this.Receipts != nil {
		s = append(s, "Receipts: "+mapStringForReceipts+",\n")
	}
	keysForInvalidTxs := make([]string, 0, len(this.InvalidTxs))
	for k, _ := range this.InvalidTxs {
		keysForInvalidTxs = append(keysForInvalidTxs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
	mapStringForInvalidTxs := "map[string]*TxWithFee{"
	for _, k := range keysForInvalidTxs {
		mapStringForInvalidTxs += fmt.Sprintf("%#v: %#v,", k, this.InvalidTxs[k])
	}
	mapStringForInvalidTxs += "}"
	if this.InvalidTxs != nil {
		s = append(s, "InvalidTxs: "+mapStringForInvalidTxs+",\n")
	}
	if this.Logs != nil {
		s = append(s, "Logs: "+fmt.Sprintf("%#v", this.Logs)+",\n")
	}
	s = append(s, "SignersIndexes: "+fmt.Sprintf("%#v", this.SignersIndexes)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&firehose.FeeInfo{")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "InitialPaidFee: "+fmt.Sprintf("%#v", this.InitialPaidFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TxWithFee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&firehose.TxWithFee{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCRWithFee) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&firehose.SCRWithFee{")
	if this.SmartContractResult != nil {
		s = append(s, "SmartContractResult: "+fmt.Sprintf("%#v", this.SmartContractResult)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFirehoseBlock(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *FirehoseBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FirehoseBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FirehoseBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SignersIndexes) > 0 {
		i -= len(m.SignersIndexes)
		copy(dAtA[i:], m.SignersIndexes)
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(m.SignersIndexes)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Logs) > 0 {
		for iNdEx := len(m.Logs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Logs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.InvalidTxs) > 0 {
		keysForInvalidTxs := make([]string, 0, len(m.InvalidTxs))
		for k := range m.InvalidTxs {
			keysForInvalidTxs = append(keysForInvalidTxs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
		for iNdEx := len(keysForInvalidTxs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.InvalidTxs[string(keysForInvalidTxs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForInvalidTxs[iNdEx])
			copy(dAtA[i:], keysForInvalidTxs[iNdEx])
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(keysForInvalidTxs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Receipts) > 0 {
		keysForReceipts := make([]string, 0, len(m.Receipts))
		for k := range m.Receipts {
			keysForReceipts = append(keysForReceipts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
		for iNdEx := len(keysForReceipts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Receipts[string(keysForReceipts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForReceipts[iNdEx])
			copy(dAtA[i:], keysForReceipts[iNdEx])
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(keysForReceipts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Rewards) > 0 {
		keysForRewards := make([]string, 0, len(m.Rewards))
		for k := range m.Rewards {
			keysForRewards = append(keysForRewards, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
		for iNdEx := len(keysForRewards) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Rewards[string(keysForRewards[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForRewards[iNdEx])
			copy(dAtA[i:], keysForRewards[iNdEx])
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(keysForRewards[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SmartContractResult) > 0 {
		keysForSmartContractResult := make([]string, 0, len(m.SmartContractResult))
		for k := range m.SmartContractResult {
			keysForSmartContractResult = append(keysForSmartContractResult, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResult)
		for iNdEx := len(keysForSmartContractResult) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SmartContractResult[string(keysForSmartContractResult[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSmartContractResult[iNdEx])
			copy(dAtA[i:], keysForSmartContractResult[iNdEx])
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(keysForSmartContractResult[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Transactions) > 0 {
		keysForTransactions := make([]string, 0, len(m.Transactions))
		for k := range m.Transactions {
			keysForTransactions = append(keysForTransactions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
		for iNdEx := len(keysForTransactions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Transactions[string(keysForTransactions[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTransactions[iNdEx])
			copy(dAtA[i:], keysForTransactions[iNdEx])
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(keysForTransactions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AlteredAccounts) > 0 {
		for iNdEx := len(m.AlteredAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlteredAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HeaderType) > 0 {
		i -= len(m.HeaderType)
		copy(dAtA[i:], m.HeaderType)
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(m.HeaderType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HeaderBytes) > 0 {
		i -= len(m.HeaderBytes)
		copy(dAtA[i:], m.HeaderBytes)
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(len(m.HeaderBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.InitialPaidFee)
		i -= size
		if _, err := __caster.MarshalTo(m.InitialPaidFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		size := __caster.Size(m.Fee)
		i -= size
		if _, err := __caster.MarshalTo(m.Fee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GasUsed != 0 {
		i = encodeVarintFirehoseBlock(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxWithFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxWithFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxWithFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SCRWithFee) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCRWithFee) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCRWithFee) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SmartContractResult != nil {
		{
			size, err := m.SmartContractResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintFirehoseBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintFirehoseBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovFirehoseBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FirehoseBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderBytes)
	if l > 0 {
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	l = len(m.HeaderType)
	if l > 0 {
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	if len(m.AlteredAccounts) > 0 {
		for _, e := range m.AlteredAccounts {
			l = e.Size()
			n += 1 + l + sovFirehoseBlock(uint64(l))
		}
	}
	if len(m.Transactions) > 0 {
		for k, v := range m.Transactions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehoseBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehoseBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehoseBlock(uint64(mapEntrySize))
		}
	}
	if len(m.SmartContractResult) > 0 {
		for k, v := range m.SmartContractResult {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehoseBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehoseBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehoseBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehoseBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehoseBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehoseBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Receipts) > 0 {
		for k, v := range m.Receipts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehoseBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehoseBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehoseBlock(uint64(mapEntrySize))
		}
	}
	if len(m.InvalidTxs) > 0 {
		for k, v := range m.InvalidTxs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFirehoseBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFirehoseBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFirehoseBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Logs) > 0 {
		for _, e := range m.Logs {
			l = e.Size()
			n += 1 + l + sovFirehoseBlock(uint64(l))
		}
	}
	l = len(m.SignersIndexes)
	if l > 0 {
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	return n
}

func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasUsed != 0 {
		n += 1 + sovFirehoseBlock(uint64(m.GasUsed))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.Fee)
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	{
		__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
		l = __caster.Size(m.InitialPaidFee)
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	return n
}

func (m *TxWithFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	return n
}

func (m *SCRWithFee) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmartContractResult != nil {
		l = m.SmartContractResult.Size()
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovFirehoseBlock(uint64(l))
	}
	return n
}

func sovFirehoseBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFirehoseBlock(x uint64) (n int) {
	return sovFirehoseBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *FirehoseBlock) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlteredAccounts := "[]*AlteredAccount{"
	for _, f := range this.AlteredAccounts {
		repeatedStringForAlteredAccounts += strings.Replace(fmt.Sprintf("%v", f), "AlteredAccount", "alteredAccount.AlteredAccount", 1) + ","
	}
	repeatedStringForAlteredAccounts += "}"
	repeatedStringForLogs := "[]*Log{"
	for _, f := range this.Logs {
		repeatedStringForLogs += strings.Replace(fmt.Sprintf("%v", f), "Log", "transaction.Log", 1) + ","
	}
	repeatedStringForLogs += "}"
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxWithFee{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%v: %v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	keysForSmartContractResult := make([]string, 0, len(this.SmartContractResult))
	for k, _ := range this.SmartContractResult {
		keysForSmartContractResult = append(keysForSmartContractResult, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResult)
	mapStringForSmartContractResult := "map[string]*SCRWithFee{"
	for _, k := range keysForSmartContractResult {
		mapStringForSmartContractResult += fmt.Sprintf("%v: %v,", k, this.SmartContractResult[k])
	}
	mapStringForSmartContractResult += "}"
	keysForRewards := make([]string, 0, len(this.Rewards))
	for k, _ := range this.Rewards {
		keysForRewards = append(keysForRewards, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
	mapStringForRewards := "map[string]*rewardTx.RewardTx{"
	for _, k := range keysForRewards {
		mapStringForRewards += fmt.Sprintf("%v: %v,", k, this.Rewards[k])
	}
	mapStringForRewards += "}"
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%v: %v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	keysForInvalidTxs := make([]string, 0, len(this.InvalidTxs))
	for k, _ := range this.InvalidTxs {
		keysForInvalidTxs = append(keysForInvalidTxs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
	mapStringForInvalidTxs := "map[string]*TxWithFee{"
	for _, k := range keysForInvalidTxs {
		mapStringForInvalidTxs += fmt.Sprintf("%v: %v,", k, this.InvalidTxs[k])
	}
	mapStringForInvalidTxs += "}"
	s := strings.Join([]string{`&FirehoseBlock{`,
		`HeaderBytes:` + fmt.Sprintf("%v", this.HeaderBytes) + `,`,
		`HeaderType:` + fmt.Sprintf("%v", this.HeaderType) + `,`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "Body", "block.Body", 1) + `,`,
		`AlteredAccounts:` + repeatedStringForAlteredAccounts + `,`,
		`Transactions:` + mapStringForTransactions + `,`,
		`SmartContractResult:` + mapStringForSmartContractResult + `,`,
		`Rewards:` + mapStringForRewards + `,`,
		`Receipts:` + mapStringForReceipts + `,`,
		`InvalidTxs:` + mapStringForInvalidTxs + `,`,
		`Logs:` + repeatedStringForLogs + `,`,
		`SignersIndexes:` + fmt.Sprintf("%v", this.SignersIndexes) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeeInfo{`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`InitialPaidFee:` + fmt.Sprintf("%v", this.InitialPaidFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxWithFee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxWithFee{`,
		`Transaction:` + strings.Replace(fmt.Sprintf("%v", this.Transaction), "Transaction", "transaction.Transaction", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCRWithFee) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCRWithFee{`,
		`SmartContractResult:` + strings.Replace(fmt.Sprintf("%v", this.SmartContractResult), "SmartContractResult", "smartContractResult.SmartContractResult", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFirehoseBlock(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *FirehoseBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehoseBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FirehoseBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FirehoseBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderBytes = append(m.HeaderBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderBytes == nil {
				m.HeaderBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &block.Body{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlteredAccounts = append(m.AlteredAccounts, &alteredAccount.AlteredAccount{})
			if err := m.AlteredAccounts[len(m.AlteredAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transactions == nil {
				m.Transactions = make(map[string]*TxWithFee)
			}
			var mapkey string
			var mapvalue *TxWithFee
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehoseBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxWithFee{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Transactions[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResult == nil {
				m.SmartContractResult = make(map[string]*SCRWithFee)
			}
			var mapkey string
			var mapvalue *SCRWithFee
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehoseBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SCRWithFee{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SmartContractResult[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[string]*rewardTx.RewardTx)
			}
			var mapkey string
			var mapvalue *rewardTx.RewardTx
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehoseBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &rewardTx.RewardTx{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipts == nil {
				m.Receipts = make(map[string]*receipt.Receipt)
			}
			var mapkey string
			var mapvalue *receipt.Receipt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehoseBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &receipt.Receipt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Receipts[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvalidTxs == nil {
				m.InvalidTxs = make(map[string]*TxWithFee)
			}
			var mapkey string
			var mapvalue *TxWithFee
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFirehoseBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFirehoseBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxWithFee{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFirehoseBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InvalidTxs[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logs = append(m.Logs, &transaction.Log{})
			if err := m.Logs[len(m.Logs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersIndexes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SignersIndexes = append(m.SignersIndexes[:0], dAtA[iNdEx:postIndex]...)
			if m.SignersIndexes == nil {
				m.SignersIndexes = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehoseBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Fee = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPaidFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_ElrondNetwork_elrond_go_core_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.InitialPaidFee = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxWithFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehoseBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxWithFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxWithFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &transaction.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCRWithFee) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFirehoseBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCRWithFee: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCRWithFee: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResult == nil {
				m.SmartContractResult = &smartContractResult.SmartContractResult{}
			}
			if err := m.SmartContractResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFirehoseBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFirehoseBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFirehoseBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFirehoseBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFirehoseBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFirehoseBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFirehoseBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFirehoseBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFirehoseBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFirehoseBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFirehoseBlock = fmt.Errorf("proto: unexpected end of group")
)
