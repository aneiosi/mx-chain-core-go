// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: outportBlock.proto

package outport

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	github_com_multiversx_mx_chain_core_go_data "github.com/multiversx/mx-chain-core-go/data"
	alteredAccount "github.com/multiversx/mx-chain-core-go/data/alteredAccount"
	block "github.com/multiversx/mx-chain-core-go/data/block"
	receipt "github.com/multiversx/mx-chain-core-go/data/receipt"
	rewardTx "github.com/multiversx/mx-chain-core-go/data/rewardTx"
	smartContractResult "github.com/multiversx/mx-chain-core-go/data/smartContractResult"
	transaction "github.com/multiversx/mx-chain-core-go/data/transaction"
	io "io"
	math "math"
	math_big "math/big"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type OutportBlock struct {
	HeaderBytes            []byte                           `protobuf:"bytes,1,opt,name=HeaderBytes,proto3" json:"headerBytes,omitempty"`
	HeaderType             string                           `protobuf:"bytes,2,opt,name=HeaderType,proto3" json:"headerType,omitempty"`
	HeaderHash             []byte                           `protobuf:"bytes,3,opt,name=HeaderHash,proto3" json:"headerBytes,omitempty"`
	Body                   *block.Body                      `protobuf:"bytes,4,opt,name=Body,proto3" json:"body,omitempty"`
	AlteredAccounts        []*alteredAccount.AlteredAccount `protobuf:"bytes,5,rep,name=AlteredAccounts,proto3" json:"alteredAccounts,omitempty"`
	Transactions           map[string]*TxInfo               `protobuf:"bytes,6,rep,name=Transactions,proto3" json:"transactions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SmartContractResults   map[string]*SCRInfo              `protobuf:"bytes,7,rep,name=SmartContractResults,proto3" json:"smartContractResults,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Rewards                map[string]*RewardInfo           `protobuf:"bytes,8,rep,name=Rewards,proto3" json:"rewards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Receipts               map[string]*receipt.Receipt      `protobuf:"bytes,9,rep,name=Receipts,proto3" json:"receipts,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InvalidTxs             map[string]*TxInfo               `protobuf:"bytes,10,rep,name=InvalidTxs,proto3" json:"invalidTxs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logs                   map[string]*transaction.Log      `protobuf:"bytes,11,rep,name=Logs,proto3" json:"logs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SignersIndexes         []uint64                         `protobuf:"varint,12,rep,packed,name=SignersIndexes,proto3" json:"signersIndexes,omitempty"`
	HighestFinalBlockNonce uint64                           `protobuf:"varint,13,opt,name=HighestFinalBlockNonce,proto3" json:"highestFinalBlockNonce,omitempty"`
	HighestFinalBlockHash  []byte                           `protobuf:"bytes,14,opt,name=HighestFinalBlockHash,proto3" json:"highestFinalBlockHash,omitempty"`
}

func (m *OutportBlock) Reset()      { *m = OutportBlock{} }
func (*OutportBlock) ProtoMessage() {}
func (*OutportBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{0}
}
func (m *OutportBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutportBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *OutportBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutportBlock.Merge(m, src)
}
func (m *OutportBlock) XXX_Size() int {
	return m.Size()
}
func (m *OutportBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_OutportBlock.DiscardUnknown(m)
}

var xxx_messageInfo_OutportBlock proto.InternalMessageInfo

func (m *OutportBlock) GetHeaderBytes() []byte {
	if m != nil {
		return m.HeaderBytes
	}
	return nil
}

func (m *OutportBlock) GetHeaderType() string {
	if m != nil {
		return m.HeaderType
	}
	return ""
}

func (m *OutportBlock) GetHeaderHash() []byte {
	if m != nil {
		return m.HeaderHash
	}
	return nil
}

func (m *OutportBlock) GetBody() *block.Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *OutportBlock) GetAlteredAccounts() []*alteredAccount.AlteredAccount {
	if m != nil {
		return m.AlteredAccounts
	}
	return nil
}

func (m *OutportBlock) GetTransactions() map[string]*TxInfo {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *OutportBlock) GetSmartContractResults() map[string]*SCRInfo {
	if m != nil {
		return m.SmartContractResults
	}
	return nil
}

func (m *OutportBlock) GetRewards() map[string]*RewardInfo {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *OutportBlock) GetReceipts() map[string]*receipt.Receipt {
	if m != nil {
		return m.Receipts
	}
	return nil
}

func (m *OutportBlock) GetInvalidTxs() map[string]*TxInfo {
	if m != nil {
		return m.InvalidTxs
	}
	return nil
}

func (m *OutportBlock) GetLogs() map[string]*transaction.Log {
	if m != nil {
		return m.Logs
	}
	return nil
}

func (m *OutportBlock) GetSignersIndexes() []uint64 {
	if m != nil {
		return m.SignersIndexes
	}
	return nil
}

func (m *OutportBlock) GetHighestFinalBlockNonce() uint64 {
	if m != nil {
		return m.HighestFinalBlockNonce
	}
	return 0
}

func (m *OutportBlock) GetHighestFinalBlockHash() []byte {
	if m != nil {
		return m.HighestFinalBlockHash
	}
	return nil
}

type FeeInfo struct {
	GasUsed        uint64        `protobuf:"varint,1,opt,name=GasUsed,proto3" json:"gasUsed,omitempty"`
	Fee            *math_big.Int `protobuf:"bytes,2,opt,name=Fee,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"fee,omitempty"`
	InitialPaidFee *math_big.Int `protobuf:"bytes,3,opt,name=InitialPaidFee,proto3,casttypewith=math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster" json:"initialPaidFee,omitempty"`
}

func (m *FeeInfo) Reset()      { *m = FeeInfo{} }
func (*FeeInfo) ProtoMessage() {}
func (*FeeInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{1}
}
func (m *FeeInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FeeInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *FeeInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FeeInfo.Merge(m, src)
}
func (m *FeeInfo) XXX_Size() int {
	return m.Size()
}
func (m *FeeInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_FeeInfo.DiscardUnknown(m)
}

var xxx_messageInfo_FeeInfo proto.InternalMessageInfo

func (m *FeeInfo) GetGasUsed() uint64 {
	if m != nil {
		return m.GasUsed
	}
	return 0
}

func (m *FeeInfo) GetFee() *math_big.Int {
	if m != nil {
		return m.Fee
	}
	return nil
}

func (m *FeeInfo) GetInitialPaidFee() *math_big.Int {
	if m != nil {
		return m.InitialPaidFee
	}
	return nil
}

type TxInfo struct {
	Transaction    *transaction.Transaction `protobuf:"bytes,1,opt,name=Transaction,proto3" json:"transaction,omitempty"`
	FeeInfo        *FeeInfo                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"feeInfo,omitempty"`
	ExecutionOrder uint32                   `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"executionOrder,omitempty"`
}

func (m *TxInfo) Reset()      { *m = TxInfo{} }
func (*TxInfo) ProtoMessage() {}
func (*TxInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{2}
}
func (m *TxInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *TxInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxInfo.Merge(m, src)
}
func (m *TxInfo) XXX_Size() int {
	return m.Size()
}
func (m *TxInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TxInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TxInfo proto.InternalMessageInfo

func (m *TxInfo) GetTransaction() *transaction.Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *TxInfo) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

func (m *TxInfo) GetExecutionOrder() uint32 {
	if m != nil {
		return m.ExecutionOrder
	}
	return 0
}

type SCRInfo struct {
	SmartContractResult *smartContractResult.SmartContractResult `protobuf:"bytes,1,opt,name=SmartContractResult,proto3" json:"smartContractResult,omitempty"`
	FeeInfo             *FeeInfo                                 `protobuf:"bytes,2,opt,name=FeeInfo,proto3" json:"feeInfo,omitempty"`
	ExecutionOrder      uint32                                   `protobuf:"varint,3,opt,name=ExecutionOrder,proto3" json:"executionOrder,omitempty"`
}

func (m *SCRInfo) Reset()      { *m = SCRInfo{} }
func (*SCRInfo) ProtoMessage() {}
func (*SCRInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{3}
}
func (m *SCRInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCRInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *SCRInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCRInfo.Merge(m, src)
}
func (m *SCRInfo) XXX_Size() int {
	return m.Size()
}
func (m *SCRInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SCRInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SCRInfo proto.InternalMessageInfo

func (m *SCRInfo) GetSmartContractResult() *smartContractResult.SmartContractResult {
	if m != nil {
		return m.SmartContractResult
	}
	return nil
}

func (m *SCRInfo) GetFeeInfo() *FeeInfo {
	if m != nil {
		return m.FeeInfo
	}
	return nil
}

func (m *SCRInfo) GetExecutionOrder() uint32 {
	if m != nil {
		return m.ExecutionOrder
	}
	return 0
}

type RewardInfo struct {
	Reward         *rewardTx.RewardTx `protobuf:"bytes,1,opt,name=Reward,proto3" json:"reward,omitempty"`
	ExecutionOrder uint32             `protobuf:"varint,2,opt,name=ExecutionOrder,proto3" json:"executionOrder,omitempty"`
}

func (m *RewardInfo) Reset()      { *m = RewardInfo{} }
func (*RewardInfo) ProtoMessage() {}
func (*RewardInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_661b95cef868af95, []int{4}
}
func (m *RewardInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	b = b[:cap(b)]
	n, err := m.MarshalToSizedBuffer(b)
	if err != nil {
		return nil, err
	}
	return b[:n], nil
}
func (m *RewardInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardInfo.Merge(m, src)
}
func (m *RewardInfo) XXX_Size() int {
	return m.Size()
}
func (m *RewardInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RewardInfo proto.InternalMessageInfo

func (m *RewardInfo) GetReward() *rewardTx.RewardTx {
	if m != nil {
		return m.Reward
	}
	return nil
}

func (m *RewardInfo) GetExecutionOrder() uint32 {
	if m != nil {
		return m.ExecutionOrder
	}
	return 0
}

func init() {
	proto.RegisterType((*OutportBlock)(nil), "proto.OutportBlock")
	proto.RegisterMapType((map[string]*TxInfo)(nil), "proto.OutportBlock.InvalidTxsEntry")
	proto.RegisterMapType((map[string]*transaction.Log)(nil), "proto.OutportBlock.LogsEntry")
	proto.RegisterMapType((map[string]*receipt.Receipt)(nil), "proto.OutportBlock.ReceiptsEntry")
	proto.RegisterMapType((map[string]*RewardInfo)(nil), "proto.OutportBlock.RewardsEntry")
	proto.RegisterMapType((map[string]*SCRInfo)(nil), "proto.OutportBlock.SmartContractResultsEntry")
	proto.RegisterMapType((map[string]*TxInfo)(nil), "proto.OutportBlock.TransactionsEntry")
	proto.RegisterType((*FeeInfo)(nil), "proto.FeeInfo")
	proto.RegisterType((*TxInfo)(nil), "proto.TxInfo")
	proto.RegisterType((*SCRInfo)(nil), "proto.SCRInfo")
	proto.RegisterType((*RewardInfo)(nil), "proto.RewardInfo")
}

func init() { proto.RegisterFile("outportBlock.proto", fileDescriptor_661b95cef868af95) }

var fileDescriptor_661b95cef868af95 = []byte{
	// 1092 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x97, 0x4f, 0x6f, 0x1b, 0x45,
	0x18, 0xc6, 0xbd, 0x89, 0x93, 0x34, 0x63, 0xc7, 0x69, 0x86, 0x24, 0xda, 0x58, 0x64, 0xd7, 0x4d,
	0x8a, 0xf0, 0x01, 0xdb, 0x52, 0x7a, 0x29, 0x44, 0x15, 0xca, 0xba, 0x09, 0xb1, 0x08, 0x0d, 0x38,
	0xae, 0x50, 0x2b, 0x40, 0x5a, 0xef, 0x4e, 0xd6, 0xab, 0xae, 0x77, 0xac, 0x9d, 0x71, 0xb0, 0x6f,
	0x70, 0xe0, 0x88, 0x04, 0xdf, 0x02, 0xf1, 0x09, 0xf8, 0x08, 0x1c, 0x73, 0xcc, 0x69, 0x69, 0x9c,
	0x0b, 0x5a, 0x2e, 0xfd, 0x08, 0xc8, 0x33, 0x63, 0x7b, 0xd6, 0xd9, 0x0a, 0x5c, 0x84, 0xd4, 0x4b,
	0xbc, 0x33, 0xf3, 0xbe, 0xbf, 0x67, 0xfe, 0x3c, 0xef, 0x8c, 0x02, 0x20, 0xee, 0xd2, 0x0e, 0x0e,
	0xa8, 0xe1, 0x61, 0xeb, 0x45, 0xb9, 0x13, 0x60, 0x8a, 0xe1, 0x02, 0xfb, 0xc9, 0x97, 0x1c, 0x97,
	0xb6, 0xba, 0xcd, 0xb2, 0x85, 0xdb, 0x15, 0x07, 0x3b, 0xb8, 0xc2, 0xba, 0x9b, 0xdd, 0x73, 0xd6,
	0x62, 0x0d, 0xf6, 0xc5, 0xb3, 0xf2, 0x8f, 0xa4, 0xf0, 0x76, 0xd7, 0xa3, 0xee, 0x05, 0x0a, 0x48,
	0xaf, 0xd2, 0xee, 0x95, 0xac, 0x96, 0xe9, 0xfa, 0x25, 0x0b, 0x07, 0xa8, 0xe4, 0xe0, 0x8a, 0x6d,
	0x52, 0xb3, 0xd2, 0x1c, 0xca, 0xf1, 0xbf, 0x22, 0xfd, 0x60, 0x96, 0x74, 0x1a, 0x98, 0x3e, 0x31,
	0x2d, 0xea, 0x62, 0xbf, 0xe2, 0x61, 0x47, 0x20, 0x6a, 0x6f, 0x8a, 0x90, 0xbe, 0x05, 0xea, 0xd9,
	0x2c, 0x28, 0xd2, 0x36, 0x03, 0x5a, 0xc5, 0x3e, 0x0d, 0x4c, 0x8b, 0xd6, 0x11, 0xe9, 0x7a, 0x34,
	0xa9, 0xef, 0x4d, 0x16, 0x1a, 0x20, 0x0b, 0xb9, 0x1d, 0x3a, 0xfa, 0x15, 0x88, 0xea, 0x6c, 0x88,
	0x6f, 0xcd, 0xc0, 0x6e, 0xf4, 0xc6, 0x1f, 0x02, 0x72, 0x3a, 0x0b, 0xc4, 0xf4, 0x28, 0x0a, 0x90,
	0x7d, 0x60, 0x59, 0xb8, 0xeb, 0xd3, 0xa9, 0x26, 0x07, 0xee, 0xfc, 0x95, 0x05, 0xd9, 0x53, 0xc9,
	0x4d, 0x70, 0x1f, 0x64, 0x8e, 0x91, 0x69, 0xa3, 0xc0, 0xe8, 0x53, 0x44, 0x54, 0xa5, 0xa0, 0x14,
	0xb3, 0xc6, 0x56, 0x14, 0xea, 0x1b, 0xad, 0x49, 0xf7, 0x07, 0xb8, 0xed, 0x52, 0xd4, 0xee, 0xd0,
	0x7e, 0x5d, 0x8e, 0x86, 0x0f, 0x01, 0xe0, 0xcd, 0x46, 0xbf, 0x83, 0xd4, 0xb9, 0x82, 0x52, 0x5c,
	0x36, 0xd4, 0x28, 0xd4, 0xd7, 0x5b, 0xe3, 0x5e, 0x29, 0x55, 0x8a, 0x85, 0x1f, 0x8e, 0x32, 0x8f,
	0x4d, 0xd2, 0x52, 0xe7, 0xff, 0x49, 0x55, 0x0a, 0x86, 0x0f, 0x40, 0xda, 0xc0, 0x76, 0x5f, 0x4d,
	0x17, 0x94, 0x62, 0x66, 0x2f, 0xc3, 0x17, 0x56, 0x1e, 0x76, 0x19, 0x30, 0x0a, 0xf5, 0x5c, 0x13,
	0xdb, 0x7d, 0x29, 0x95, 0x05, 0xc3, 0x6f, 0xc0, 0xea, 0x41, 0x6c, 0x3f, 0x88, 0xba, 0x50, 0x98,
	0x2f, 0x66, 0xf6, 0x36, 0x44, 0x7e, 0x7c, 0xd4, 0xd8, 0x8e, 0x42, 0x7d, 0x2b, 0xbe, 0x83, 0xf2,
	0x7c, 0xa6, 0x61, 0x10, 0x81, 0x6c, 0x63, 0x62, 0x50, 0xa2, 0x2e, 0x32, 0xf8, 0x7b, 0x02, 0x2e,
	0xef, 0x78, 0x59, 0x8e, 0x3b, 0xf4, 0x69, 0xd0, 0x37, 0xf2, 0x51, 0xa8, 0x6f, 0x4a, 0xfe, 0x96,
	0x95, 0x62, 0x58, 0xf8, 0x83, 0x02, 0xd6, 0xcf, 0x6e, 0xbb, 0x96, 0xa8, 0x4b, 0x4c, 0xaf, 0x94,
	0xa4, 0x97, 0x14, 0xcf, 0x75, 0x77, 0xa2, 0x50, 0xd7, 0x12, 0x8a, 0x40, 0xd6, 0x4f, 0x94, 0x83,
	0x5f, 0x80, 0xa5, 0x3a, 0x73, 0x2a, 0x51, 0xef, 0x30, 0xe5, 0x42, 0x92, 0xb2, 0x08, 0xe1, 0x62,
	0x1b, 0x51, 0xa8, 0xaf, 0x71, 0x7b, 0xcb, 0xfc, 0x11, 0x07, 0x3e, 0x05, 0x77, 0xea, 0xbc, 0x80,
	0x88, 0xba, 0xcc, 0x98, 0xf7, 0x92, 0x99, 0x3c, 0x86, 0x43, 0x37, 0xa3, 0x50, 0x87, 0xa2, 0xee,
	0x64, 0xea, 0x18, 0x05, 0xbf, 0x06, 0xa0, 0xe6, 0x5f, 0x98, 0x9e, 0x6b, 0x37, 0x7a, 0x44, 0x05,
	0x0c, 0xbc, 0x9b, 0x04, 0x9e, 0x44, 0x71, 0x34, 0xf3, 0xb1, 0x3b, 0xee, 0x94, 0xcd, 0x38, 0x09,
	0x85, 0x87, 0x20, 0x7d, 0x82, 0x1d, 0xa2, 0x66, 0x18, 0x78, 0x3b, 0x09, 0x3c, 0x1c, 0xe7, 0x48,
	0x66, 0x4f, 0x0f, 0x3b, 0x32, 0x8c, 0xa5, 0xc3, 0xc7, 0x20, 0x77, 0xe6, 0x3a, 0x3e, 0x0a, 0x48,
	0xcd, 0xb7, 0x51, 0x0f, 0x11, 0x35, 0x5b, 0x98, 0x2f, 0xa6, 0x8d, 0x77, 0xa3, 0x50, 0x57, 0x49,
	0x6c, 0x44, 0xca, 0x9d, 0xca, 0x81, 0x5f, 0x81, 0xcd, 0x63, 0xd7, 0x69, 0x21, 0x42, 0x8f, 0x5c,
	0xdf, 0xf4, 0x98, 0xfc, 0x13, 0xec, 0x5b, 0x48, 0x5d, 0x29, 0x28, 0xc5, 0xb4, 0x71, 0x3f, 0x0a,
	0xf5, 0x42, 0x2b, 0x31, 0x42, 0xa2, 0xbe, 0x86, 0x01, 0x9f, 0x81, 0x8d, 0x5b, 0x23, 0xac, 0x7a,
	0x73, 0xac, 0x7a, 0x77, 0xa3, 0x50, 0xd7, 0x5b, 0x49, 0x01, 0x12, 0x3b, 0x99, 0x90, 0x7f, 0x02,
	0xd6, 0x6e, 0x55, 0x05, 0xbc, 0x0b, 0xe6, 0x5f, 0xa0, 0x3e, 0xbb, 0x91, 0x96, 0xeb, 0xc3, 0x4f,
	0xb8, 0x0b, 0x16, 0x2e, 0x4c, 0xaf, 0xcb, 0x6f, 0x9a, 0xcc, 0xde, 0x8a, 0xd8, 0xed, 0x46, 0xaf,
	0xe6, 0x9f, 0xe3, 0x3a, 0x1f, 0xfb, 0x68, 0xee, 0xa1, 0x92, 0xff, 0x12, 0x6c, 0xbd, 0xd6, 0xf5,
	0x09, 0xdc, 0xfb, 0x71, 0x6e, 0x4e, 0x70, 0xcf, 0xaa, 0xf5, 0x69, 0xf0, 0x67, 0x20, 0x2b, 0x9b,
	0x3a, 0x81, 0xf5, 0x7e, 0x9c, 0xb5, 0x26, 0x58, 0x3c, 0x6b, 0x1a, 0xf7, 0x29, 0x58, 0x89, 0xf9,
	0xf9, 0xdf, 0xcf, 0x4d, 0xa4, 0xc9, 0xb0, 0x13, 0xb0, 0x3a, 0xe5, 0xe1, 0xff, 0xb2, 0x85, 0x55,
	0xb0, 0x3c, 0x36, 0x6e, 0x02, 0xa7, 0x10, 0xe7, 0x00, 0xc1, 0x39, 0xc1, 0x8e, 0x04, 0xd9, 0xf9,
	0x6d, 0x0e, 0x2c, 0x1d, 0x21, 0x34, 0x64, 0xc3, 0x0a, 0x58, 0xfa, 0xc4, 0x24, 0x4f, 0x09, 0xb2,
	0x19, 0x27, 0xcd, 0x2f, 0x04, 0x87, 0x77, 0xc9, 0x17, 0x82, 0x88, 0x82, 0x1e, 0x98, 0x3f, 0x42,
	0x5c, 0x20, 0x6b, 0x3c, 0x8f, 0x42, 0x7d, 0xe5, 0x1c, 0x49, 0x3e, 0xfd, 0xf5, 0x0f, 0xfd, 0xb0,
	0x6d, 0xd2, 0x56, 0xa5, 0xe9, 0x3a, 0xe5, 0x9a, 0x4f, 0xf7, 0x67, 0x78, 0x2a, 0xcb, 0x86, 0xeb,
	0xd4, 0x7c, 0x5a, 0x35, 0x09, 0x45, 0x41, 0x7d, 0x28, 0x03, 0x7f, 0x54, 0x40, 0xae, 0xe6, 0xbb,
	0xd4, 0x35, 0xbd, 0xcf, 0x4d, 0xd7, 0x1e, 0x2a, 0xf3, 0x57, 0x09, 0x0d, 0x4b, 0xd0, 0x8d, 0x8d,
	0xfc, 0x1f, 0x93, 0x98, 0x12, 0xdf, 0x79, 0xa9, 0x80, 0x45, 0x7e, 0x2a, 0xf0, 0x14, 0x64, 0xa4,
	0xea, 0x60, 0xbb, 0x97, 0xd9, 0x83, 0xa3, 0x93, 0x9b, 0x8c, 0xf0, 0x07, 0x54, 0x7a, 0x47, 0xe4,
	0x67, 0x5b, 0x8a, 0x83, 0x1f, 0x8f, 0x4f, 0x65, 0xca, 0x55, 0xa2, 0x97, 0x1f, 0xcd, 0x39, 0x6f,
	0xc8, 0x47, 0x33, 0x3a, 0xcb, 0xc7, 0x20, 0x77, 0xd8, 0x43, 0x56, 0x77, 0x48, 0x3b, 0x0d, 0x6c,
	0x14, 0xb0, 0xbd, 0x5a, 0xe1, 0xd7, 0x15, 0x8a, 0x8d, 0xc8, 0xd7, 0x55, 0x3c, 0x67, 0xe7, 0xfb,
	0x39, 0xb0, 0x24, 0x6a, 0x0c, 0x62, 0xf0, 0x4e, 0x42, 0xc5, 0x8a, 0xb5, 0xe6, 0x47, 0x05, 0x79,
	0x3b, 0xc2, 0xb8, 0x17, 0x85, 0xfa, 0x76, 0xc2, 0x1b, 0x26, 0xe9, 0x26, 0x91, 0xdf, 0x96, 0x3d,
	0xf8, 0x59, 0x01, 0x60, 0x72, 0x37, 0xc0, 0x47, 0x60, 0x91, 0xb7, 0xc4, 0xca, 0x57, 0x63, 0xd7,
	0x47, 0xa3, 0x67, 0xac, 0x47, 0xa1, 0x7e, 0x97, 0xbf, 0xa2, 0x12, 0x55, 0x24, 0x25, 0xcc, 0x69,
	0x6e, 0xf6, 0x39, 0x19, 0xdd, 0xcb, 0x6b, 0x2d, 0x75, 0x75, 0xad, 0xa5, 0x5e, 0x5d, 0x6b, 0xca,
	0x77, 0x03, 0x4d, 0xf9, 0x65, 0xa0, 0x29, 0xbf, 0x0f, 0x34, 0xe5, 0x72, 0xa0, 0x29, 0x57, 0x03,
	0x4d, 0x79, 0x39, 0xd0, 0x94, 0x3f, 0x07, 0x5a, 0xea, 0xd5, 0x40, 0x53, 0x7e, 0xba, 0xd1, 0x52,
	0x97, 0x37, 0x5a, 0xea, 0xea, 0x46, 0x4b, 0x3d, 0x9f, 0xc5, 0xfe, 0x15, 0xf1, 0x4f, 0xcd, 0xbe,
	0xf8, 0x6d, 0x2e, 0xb2, 0xa5, 0x3e, 0xf8, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xe5, 0x74, 0x61, 0xc4,
	0xee, 0x0c, 0x00, 0x00,
}

func (this *OutportBlock) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*OutportBlock)
	if !ok {
		that2, ok := that.(OutportBlock)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.HeaderBytes, that1.HeaderBytes) {
		return false
	}
	if this.HeaderType != that1.HeaderType {
		return false
	}
	if !bytes.Equal(this.HeaderHash, that1.HeaderHash) {
		return false
	}
	if !this.Body.Equal(that1.Body) {
		return false
	}
	if len(this.AlteredAccounts) != len(that1.AlteredAccounts) {
		return false
	}
	for i := range this.AlteredAccounts {
		if !this.AlteredAccounts[i].Equal(that1.AlteredAccounts[i]) {
			return false
		}
	}
	if len(this.Transactions) != len(that1.Transactions) {
		return false
	}
	for i := range this.Transactions {
		if !this.Transactions[i].Equal(that1.Transactions[i]) {
			return false
		}
	}
	if len(this.SmartContractResults) != len(that1.SmartContractResults) {
		return false
	}
	for i := range this.SmartContractResults {
		if !this.SmartContractResults[i].Equal(that1.SmartContractResults[i]) {
			return false
		}
	}
	if len(this.Rewards) != len(that1.Rewards) {
		return false
	}
	for i := range this.Rewards {
		if !this.Rewards[i].Equal(that1.Rewards[i]) {
			return false
		}
	}
	if len(this.Receipts) != len(that1.Receipts) {
		return false
	}
	for i := range this.Receipts {
		if !this.Receipts[i].Equal(that1.Receipts[i]) {
			return false
		}
	}
	if len(this.InvalidTxs) != len(that1.InvalidTxs) {
		return false
	}
	for i := range this.InvalidTxs {
		if !this.InvalidTxs[i].Equal(that1.InvalidTxs[i]) {
			return false
		}
	}
	if len(this.Logs) != len(that1.Logs) {
		return false
	}
	for i := range this.Logs {
		if !this.Logs[i].Equal(that1.Logs[i]) {
			return false
		}
	}
	if len(this.SignersIndexes) != len(that1.SignersIndexes) {
		return false
	}
	for i := range this.SignersIndexes {
		if this.SignersIndexes[i] != that1.SignersIndexes[i] {
			return false
		}
	}
	if this.HighestFinalBlockNonce != that1.HighestFinalBlockNonce {
		return false
	}
	if !bytes.Equal(this.HighestFinalBlockHash, that1.HighestFinalBlockHash) {
		return false
	}
	return true
}
func (this *FeeInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*FeeInfo)
	if !ok {
		that2, ok := that.(FeeInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.GasUsed != that1.GasUsed {
		return false
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.Fee, that1.Fee) {
			return false
		}
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		if !__caster.Equal(this.InitialPaidFee, that1.InitialPaidFee) {
			return false
		}
	}
	return true
}
func (this *TxInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TxInfo)
	if !ok {
		that2, ok := that.(TxInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Transaction.Equal(that1.Transaction) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	if this.ExecutionOrder != that1.ExecutionOrder {
		return false
	}
	return true
}
func (this *SCRInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SCRInfo)
	if !ok {
		that2, ok := that.(SCRInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.SmartContractResult.Equal(that1.SmartContractResult) {
		return false
	}
	if !this.FeeInfo.Equal(that1.FeeInfo) {
		return false
	}
	if this.ExecutionOrder != that1.ExecutionOrder {
		return false
	}
	return true
}
func (this *RewardInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardInfo)
	if !ok {
		that2, ok := that.(RewardInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Reward.Equal(that1.Reward) {
		return false
	}
	if this.ExecutionOrder != that1.ExecutionOrder {
		return false
	}
	return true
}
func (this *OutportBlock) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 18)
	s = append(s, "&outport.OutportBlock{")
	s = append(s, "HeaderBytes: "+fmt.Sprintf("%#v", this.HeaderBytes)+",\n")
	s = append(s, "HeaderType: "+fmt.Sprintf("%#v", this.HeaderType)+",\n")
	s = append(s, "HeaderHash: "+fmt.Sprintf("%#v", this.HeaderHash)+",\n")
	if this.Body != nil {
		s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	}
	if this.AlteredAccounts != nil {
		s = append(s, "AlteredAccounts: "+fmt.Sprintf("%#v", this.AlteredAccounts)+",\n")
	}
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxInfo{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%#v: %#v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	if this.Transactions != nil {
		s = append(s, "Transactions: "+mapStringForTransactions+",\n")
	}
	keysForSmartContractResults := make([]string, 0, len(this.SmartContractResults))
	for k, _ := range this.SmartContractResults {
		keysForSmartContractResults = append(keysForSmartContractResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResults)
	mapStringForSmartContractResults := "map[string]*SCRInfo{"
	for _, k := range keysForSmartContractResults {
		mapStringForSmartContractResults += fmt.Sprintf("%#v: %#v,", k, this.SmartContractResults[k])
	}
	mapStringForSmartContractResults += "}"
	if this.SmartContractResults != nil {
		s = append(s, "SmartContractResults: "+mapStringForSmartContractResults+",\n")
	}
	keysForRewards := make([]string, 0, len(this.Rewards))
	for k, _ := range this.Rewards {
		keysForRewards = append(keysForRewards, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
	mapStringForRewards := "map[string]*RewardInfo{"
	for _, k := range keysForRewards {
		mapStringForRewards += fmt.Sprintf("%#v: %#v,", k, this.Rewards[k])
	}
	mapStringForRewards += "}"
	if this.Rewards != nil {
		s = append(s, "Rewards: "+mapStringForRewards+",\n")
	}
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%#v: %#v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	if this.Receipts != nil {
		s = append(s, "Receipts: "+mapStringForReceipts+",\n")
	}
	keysForInvalidTxs := make([]string, 0, len(this.InvalidTxs))
	for k, _ := range this.InvalidTxs {
		keysForInvalidTxs = append(keysForInvalidTxs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
	mapStringForInvalidTxs := "map[string]*TxInfo{"
	for _, k := range keysForInvalidTxs {
		mapStringForInvalidTxs += fmt.Sprintf("%#v: %#v,", k, this.InvalidTxs[k])
	}
	mapStringForInvalidTxs += "}"
	if this.InvalidTxs != nil {
		s = append(s, "InvalidTxs: "+mapStringForInvalidTxs+",\n")
	}
	keysForLogs := make([]string, 0, len(this.Logs))
	for k, _ := range this.Logs {
		keysForLogs = append(keysForLogs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLogs)
	mapStringForLogs := "map[string]*transaction.Log{"
	for _, k := range keysForLogs {
		mapStringForLogs += fmt.Sprintf("%#v: %#v,", k, this.Logs[k])
	}
	mapStringForLogs += "}"
	if this.Logs != nil {
		s = append(s, "Logs: "+mapStringForLogs+",\n")
	}
	s = append(s, "SignersIndexes: "+fmt.Sprintf("%#v", this.SignersIndexes)+",\n")
	s = append(s, "HighestFinalBlockNonce: "+fmt.Sprintf("%#v", this.HighestFinalBlockNonce)+",\n")
	s = append(s, "HighestFinalBlockHash: "+fmt.Sprintf("%#v", this.HighestFinalBlockHash)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *FeeInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.FeeInfo{")
	s = append(s, "GasUsed: "+fmt.Sprintf("%#v", this.GasUsed)+",\n")
	s = append(s, "Fee: "+fmt.Sprintf("%#v", this.Fee)+",\n")
	s = append(s, "InitialPaidFee: "+fmt.Sprintf("%#v", this.InitialPaidFee)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TxInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.TxInfo{")
	if this.Transaction != nil {
		s = append(s, "Transaction: "+fmt.Sprintf("%#v", this.Transaction)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "ExecutionOrder: "+fmt.Sprintf("%#v", this.ExecutionOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SCRInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&outport.SCRInfo{")
	if this.SmartContractResult != nil {
		s = append(s, "SmartContractResult: "+fmt.Sprintf("%#v", this.SmartContractResult)+",\n")
	}
	if this.FeeInfo != nil {
		s = append(s, "FeeInfo: "+fmt.Sprintf("%#v", this.FeeInfo)+",\n")
	}
	s = append(s, "ExecutionOrder: "+fmt.Sprintf("%#v", this.ExecutionOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RewardInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&outport.RewardInfo{")
	if this.Reward != nil {
		s = append(s, "Reward: "+fmt.Sprintf("%#v", this.Reward)+",\n")
	}
	s = append(s, "ExecutionOrder: "+fmt.Sprintf("%#v", this.ExecutionOrder)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringOutportBlock(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *OutportBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutportBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutportBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HighestFinalBlockHash) > 0 {
		i -= len(m.HighestFinalBlockHash)
		copy(dAtA[i:], m.HighestFinalBlockHash)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HighestFinalBlockHash)))
		i--
		dAtA[i] = 0x72
	}
	if m.HighestFinalBlockNonce != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.HighestFinalBlockNonce))
		i--
		dAtA[i] = 0x68
	}
	if len(m.SignersIndexes) > 0 {
		dAtA2 := make([]byte, len(m.SignersIndexes)*10)
		var j1 int
		for _, num := range m.SignersIndexes {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintOutportBlock(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Logs) > 0 {
		keysForLogs := make([]string, 0, len(m.Logs))
		for k := range m.Logs {
			keysForLogs = append(keysForLogs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForLogs)
		for iNdEx := len(keysForLogs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Logs[string(keysForLogs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForLogs[iNdEx])
			copy(dAtA[i:], keysForLogs[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForLogs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.InvalidTxs) > 0 {
		keysForInvalidTxs := make([]string, 0, len(m.InvalidTxs))
		for k := range m.InvalidTxs {
			keysForInvalidTxs = append(keysForInvalidTxs, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
		for iNdEx := len(keysForInvalidTxs) - 1; iNdEx >= 0; iNdEx-- {
			v := m.InvalidTxs[string(keysForInvalidTxs[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForInvalidTxs[iNdEx])
			copy(dAtA[i:], keysForInvalidTxs[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForInvalidTxs[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.Receipts) > 0 {
		keysForReceipts := make([]string, 0, len(m.Receipts))
		for k := range m.Receipts {
			keysForReceipts = append(keysForReceipts, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
		for iNdEx := len(keysForReceipts) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Receipts[string(keysForReceipts[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForReceipts[iNdEx])
			copy(dAtA[i:], keysForReceipts[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForReceipts[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Rewards) > 0 {
		keysForRewards := make([]string, 0, len(m.Rewards))
		for k := range m.Rewards {
			keysForRewards = append(keysForRewards, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
		for iNdEx := len(keysForRewards) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Rewards[string(keysForRewards[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForRewards[iNdEx])
			copy(dAtA[i:], keysForRewards[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForRewards[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.SmartContractResults) > 0 {
		keysForSmartContractResults := make([]string, 0, len(m.SmartContractResults))
		for k := range m.SmartContractResults {
			keysForSmartContractResults = append(keysForSmartContractResults, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResults)
		for iNdEx := len(keysForSmartContractResults) - 1; iNdEx >= 0; iNdEx-- {
			v := m.SmartContractResults[string(keysForSmartContractResults[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForSmartContractResults[iNdEx])
			copy(dAtA[i:], keysForSmartContractResults[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForSmartContractResults[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Transactions) > 0 {
		keysForTransactions := make([]string, 0, len(m.Transactions))
		for k := range m.Transactions {
			keysForTransactions = append(keysForTransactions, string(k))
		}
		github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
		for iNdEx := len(keysForTransactions) - 1; iNdEx >= 0; iNdEx-- {
			v := m.Transactions[string(keysForTransactions[iNdEx])]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintOutportBlock(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(keysForTransactions[iNdEx])
			copy(dAtA[i:], keysForTransactions[iNdEx])
			i = encodeVarintOutportBlock(dAtA, i, uint64(len(keysForTransactions[iNdEx])))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOutportBlock(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.AlteredAccounts) > 0 {
		for iNdEx := len(m.AlteredAccounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AlteredAccounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOutportBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Body != nil {
		{
			size, err := m.Body.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.HeaderHash) > 0 {
		i -= len(m.HeaderHash)
		copy(dAtA[i:], m.HeaderHash)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HeaderType) > 0 {
		i -= len(m.HeaderType)
		copy(dAtA[i:], m.HeaderType)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HeaderBytes) > 0 {
		i -= len(m.HeaderBytes)
		copy(dAtA[i:], m.HeaderBytes)
		i = encodeVarintOutportBlock(dAtA, i, uint64(len(m.HeaderBytes)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FeeInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FeeInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FeeInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.InitialPaidFee)
		i -= size
		if _, err := __caster.MarshalTo(m.InitialPaidFee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOutportBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		size := __caster.Size(m.Fee)
		i -= size
		if _, err := __caster.MarshalTo(m.Fee, dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintOutportBlock(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.GasUsed != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.GasUsed))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TxInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionOrder != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ExecutionOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SCRInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCRInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SCRInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionOrder != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ExecutionOrder))
		i--
		dAtA[i] = 0x18
	}
	if m.FeeInfo != nil {
		{
			size, err := m.FeeInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.SmartContractResult != nil {
		{
			size, err := m.SmartContractResult.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RewardInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ExecutionOrder != 0 {
		i = encodeVarintOutportBlock(dAtA, i, uint64(m.ExecutionOrder))
		i--
		dAtA[i] = 0x10
	}
	if m.Reward != nil {
		{
			size, err := m.Reward.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOutportBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOutportBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovOutportBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OutportBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HeaderBytes)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	l = len(m.HeaderType)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	l = len(m.HeaderHash)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.Body != nil {
		l = m.Body.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if len(m.AlteredAccounts) > 0 {
		for _, e := range m.AlteredAccounts {
			l = e.Size()
			n += 1 + l + sovOutportBlock(uint64(l))
		}
	}
	if len(m.Transactions) > 0 {
		for k, v := range m.Transactions {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.SmartContractResults) > 0 {
		for k, v := range m.SmartContractResults {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Rewards) > 0 {
		for k, v := range m.Rewards {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Receipts) > 0 {
		for k, v := range m.Receipts {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.InvalidTxs) > 0 {
		for k, v := range m.InvalidTxs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.Logs) > 0 {
		for k, v := range m.Logs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovOutportBlock(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovOutportBlock(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovOutportBlock(uint64(mapEntrySize))
		}
	}
	if len(m.SignersIndexes) > 0 {
		l = 0
		for _, e := range m.SignersIndexes {
			l += sovOutportBlock(uint64(e))
		}
		n += 1 + sovOutportBlock(uint64(l)) + l
	}
	if m.HighestFinalBlockNonce != 0 {
		n += 1 + sovOutportBlock(uint64(m.HighestFinalBlockNonce))
	}
	l = len(m.HighestFinalBlockHash)
	if l > 0 {
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func (m *FeeInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasUsed != 0 {
		n += 1 + sovOutportBlock(uint64(m.GasUsed))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.Fee)
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	{
		__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
		l = __caster.Size(m.InitialPaidFee)
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	return n
}

func (m *TxInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.ExecutionOrder != 0 {
		n += 1 + sovOutportBlock(uint64(m.ExecutionOrder))
	}
	return n
}

func (m *SCRInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SmartContractResult != nil {
		l = m.SmartContractResult.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.FeeInfo != nil {
		l = m.FeeInfo.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.ExecutionOrder != 0 {
		n += 1 + sovOutportBlock(uint64(m.ExecutionOrder))
	}
	return n
}

func (m *RewardInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Reward != nil {
		l = m.Reward.Size()
		n += 1 + l + sovOutportBlock(uint64(l))
	}
	if m.ExecutionOrder != 0 {
		n += 1 + sovOutportBlock(uint64(m.ExecutionOrder))
	}
	return n
}

func sovOutportBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOutportBlock(x uint64) (n int) {
	return sovOutportBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *OutportBlock) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForAlteredAccounts := "[]*AlteredAccount{"
	for _, f := range this.AlteredAccounts {
		repeatedStringForAlteredAccounts += strings.Replace(fmt.Sprintf("%v", f), "AlteredAccount", "alteredAccount.AlteredAccount", 1) + ","
	}
	repeatedStringForAlteredAccounts += "}"
	keysForTransactions := make([]string, 0, len(this.Transactions))
	for k, _ := range this.Transactions {
		keysForTransactions = append(keysForTransactions, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForTransactions)
	mapStringForTransactions := "map[string]*TxInfo{"
	for _, k := range keysForTransactions {
		mapStringForTransactions += fmt.Sprintf("%v: %v,", k, this.Transactions[k])
	}
	mapStringForTransactions += "}"
	keysForSmartContractResults := make([]string, 0, len(this.SmartContractResults))
	for k, _ := range this.SmartContractResults {
		keysForSmartContractResults = append(keysForSmartContractResults, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForSmartContractResults)
	mapStringForSmartContractResults := "map[string]*SCRInfo{"
	for _, k := range keysForSmartContractResults {
		mapStringForSmartContractResults += fmt.Sprintf("%v: %v,", k, this.SmartContractResults[k])
	}
	mapStringForSmartContractResults += "}"
	keysForRewards := make([]string, 0, len(this.Rewards))
	for k, _ := range this.Rewards {
		keysForRewards = append(keysForRewards, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForRewards)
	mapStringForRewards := "map[string]*RewardInfo{"
	for _, k := range keysForRewards {
		mapStringForRewards += fmt.Sprintf("%v: %v,", k, this.Rewards[k])
	}
	mapStringForRewards += "}"
	keysForReceipts := make([]string, 0, len(this.Receipts))
	for k, _ := range this.Receipts {
		keysForReceipts = append(keysForReceipts, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForReceipts)
	mapStringForReceipts := "map[string]*receipt.Receipt{"
	for _, k := range keysForReceipts {
		mapStringForReceipts += fmt.Sprintf("%v: %v,", k, this.Receipts[k])
	}
	mapStringForReceipts += "}"
	keysForInvalidTxs := make([]string, 0, len(this.InvalidTxs))
	for k, _ := range this.InvalidTxs {
		keysForInvalidTxs = append(keysForInvalidTxs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForInvalidTxs)
	mapStringForInvalidTxs := "map[string]*TxInfo{"
	for _, k := range keysForInvalidTxs {
		mapStringForInvalidTxs += fmt.Sprintf("%v: %v,", k, this.InvalidTxs[k])
	}
	mapStringForInvalidTxs += "}"
	keysForLogs := make([]string, 0, len(this.Logs))
	for k, _ := range this.Logs {
		keysForLogs = append(keysForLogs, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForLogs)
	mapStringForLogs := "map[string]*transaction.Log{"
	for _, k := range keysForLogs {
		mapStringForLogs += fmt.Sprintf("%v: %v,", k, this.Logs[k])
	}
	mapStringForLogs += "}"
	s := strings.Join([]string{`&OutportBlock{`,
		`HeaderBytes:` + fmt.Sprintf("%v", this.HeaderBytes) + `,`,
		`HeaderType:` + fmt.Sprintf("%v", this.HeaderType) + `,`,
		`HeaderHash:` + fmt.Sprintf("%v", this.HeaderHash) + `,`,
		`Body:` + strings.Replace(fmt.Sprintf("%v", this.Body), "Body", "block.Body", 1) + `,`,
		`AlteredAccounts:` + repeatedStringForAlteredAccounts + `,`,
		`Transactions:` + mapStringForTransactions + `,`,
		`SmartContractResults:` + mapStringForSmartContractResults + `,`,
		`Rewards:` + mapStringForRewards + `,`,
		`Receipts:` + mapStringForReceipts + `,`,
		`InvalidTxs:` + mapStringForInvalidTxs + `,`,
		`Logs:` + mapStringForLogs + `,`,
		`SignersIndexes:` + fmt.Sprintf("%v", this.SignersIndexes) + `,`,
		`HighestFinalBlockNonce:` + fmt.Sprintf("%v", this.HighestFinalBlockNonce) + `,`,
		`HighestFinalBlockHash:` + fmt.Sprintf("%v", this.HighestFinalBlockHash) + `,`,
		`}`,
	}, "")
	return s
}
func (this *FeeInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&FeeInfo{`,
		`GasUsed:` + fmt.Sprintf("%v", this.GasUsed) + `,`,
		`Fee:` + fmt.Sprintf("%v", this.Fee) + `,`,
		`InitialPaidFee:` + fmt.Sprintf("%v", this.InitialPaidFee) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TxInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TxInfo{`,
		`Transaction:` + strings.Replace(fmt.Sprintf("%v", this.Transaction), "Transaction", "transaction.Transaction", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`ExecutionOrder:` + fmt.Sprintf("%v", this.ExecutionOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SCRInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SCRInfo{`,
		`SmartContractResult:` + strings.Replace(fmt.Sprintf("%v", this.SmartContractResult), "SmartContractResult", "smartContractResult.SmartContractResult", 1) + `,`,
		`FeeInfo:` + strings.Replace(this.FeeInfo.String(), "FeeInfo", "FeeInfo", 1) + `,`,
		`ExecutionOrder:` + fmt.Sprintf("%v", this.ExecutionOrder) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RewardInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RewardInfo{`,
		`Reward:` + strings.Replace(fmt.Sprintf("%v", this.Reward), "RewardTx", "rewardTx.RewardTx", 1) + `,`,
		`ExecutionOrder:` + fmt.Sprintf("%v", this.ExecutionOrder) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringOutportBlock(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *OutportBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutportBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutportBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderBytes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderBytes = append(m.HeaderBytes[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderBytes == nil {
				m.HeaderBytes = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HeaderHash = append(m.HeaderHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HeaderHash == nil {
				m.HeaderHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Body == nil {
				m.Body = &block.Body{}
			}
			if err := m.Body.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlteredAccounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlteredAccounts = append(m.AlteredAccounts, &alteredAccount.AlteredAccount{})
			if err := m.AlteredAccounts[len(m.AlteredAccounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transactions == nil {
				m.Transactions = make(map[string]*TxInfo)
			}
			var mapkey string
			var mapvalue *TxInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Transactions[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResults", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResults == nil {
				m.SmartContractResults = make(map[string]*SCRInfo)
			}
			var mapkey string
			var mapvalue *SCRInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SCRInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SmartContractResults[mapkey] = mapvalue
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rewards == nil {
				m.Rewards = make(map[string]*RewardInfo)
			}
			var mapkey string
			var mapvalue *RewardInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RewardInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Rewards[mapkey] = mapvalue
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receipts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receipts == nil {
				m.Receipts = make(map[string]*receipt.Receipt)
			}
			var mapkey string
			var mapvalue *receipt.Receipt
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &receipt.Receipt{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Receipts[mapkey] = mapvalue
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvalidTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InvalidTxs == nil {
				m.InvalidTxs = make(map[string]*TxInfo)
			}
			var mapkey string
			var mapvalue *TxInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TxInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.InvalidTxs[mapkey] = mapvalue
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logs == nil {
				m.Logs = make(map[string]*transaction.Log)
			}
			var mapkey string
			var mapvalue *transaction.Log
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthOutportBlock
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &transaction.Log{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOutportBlock(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOutportBlock
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Logs[mapkey] = mapvalue
			iNdEx = postIndex
		case 12:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SignersIndexes = append(m.SignersIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOutportBlock
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthOutportBlock
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthOutportBlock
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SignersIndexes) == 0 {
					m.SignersIndexes = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOutportBlock
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SignersIndexes = append(m.SignersIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SignersIndexes", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestFinalBlockNonce", wireType)
			}
			m.HighestFinalBlockNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HighestFinalBlockNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HighestFinalBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HighestFinalBlockHash = append(m.HighestFinalBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.HighestFinalBlockHash == nil {
				m.HighestFinalBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FeeInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FeeInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FeeInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasUsed", wireType)
			}
			m.GasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.Fee = tmp
				}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialPaidFee", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			{
				__caster := &github_com_multiversx_mx_chain_core_go_data.BigIntCaster{}
				if tmp, err := __caster.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
					return err
				} else {
					m.InitialPaidFee = tmp
				}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &transaction.Transaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOrder", wireType)
			}
			m.ExecutionOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCRInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCRInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCRInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SmartContractResult", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SmartContractResult == nil {
				m.SmartContractResult = &smartContractResult.SmartContractResult{}
			}
			if err := m.SmartContractResult.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FeeInfo == nil {
				m.FeeInfo = &FeeInfo{}
			}
			if err := m.FeeInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOrder", wireType)
			}
			m.ExecutionOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RewardInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOutportBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Reward == nil {
				m.Reward = &rewardTx.RewardTx{}
			}
			if err := m.Reward.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExecutionOrder", wireType)
			}
			m.ExecutionOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExecutionOrder |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOutportBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOutportBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOutportBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOutportBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOutportBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOutportBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOutportBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOutportBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOutportBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOutportBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOutportBlock = fmt.Errorf("proto: unexpected end of group")
)
