syntax = "proto3";

package proto;

option go_package = "github.com/multiversx/mx-chain-core-go/data/outport;outport";
option (gogoproto.stable_marshaler_all) = true;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/multiversx/mx-chain-core-go/data/block/block.proto";
import "github.com/multiversx/mx-chain-core-go/data/transaction/log.proto";
import "github.com/multiversx/mx-chain-core-go/data/transaction/transaction.proto";
import "github.com/multiversx/mx-chain-core-go/data/smartContractResult/smartContractResult.proto";
import "github.com/multiversx/mx-chain-core-go/data/receipt/receipt.proto";
import "github.com/multiversx/mx-chain-core-go/data/rewardTx/rewardTx.proto";
import "github.com/multiversx/mx-chain-core-go/data/alteredAccount/alteredAccount.proto";

message OutportBlock {
  bytes                        HeaderBytes = 1 [(gogoproto.jsontag) = "headerBytes,omitempty"];
  string                       HeaderType = 2 [(gogoproto.jsontag) = "headerType,omitempty"];
  bytes                        HeaderHash = 3 [(gogoproto.jsontag) = "headerHash,omitempty"];
  Body                         Body = 4 [(gogoproto.jsontag) = "body,omitempty"];
  map <string, AlteredAccount> AlteredAccounts = 5 [(gogoproto.jsontag) = "alteredAccounts,omitempty"];
  TransactionPool              TransactionPool = 6 [(gogoproto.jsontag) = "transactionPool,omitempty"];
  repeated string NotarizedHeadersHashes = 13 [(gogoproto.jsontag) = "notarizedHeadersHashes,omitempty"];
  HeaderGasConsumption         HeaderGasConsumption = 7 [(gogoproto.jsontag) = "headerGasConsumption,omitempty"];
  uint32                       NumberOfShards = 8 [(gogoproto.jsontag) = "numberOfShards"];
  bool                         IsImportDB = 9 [(gogoproto.jsontag) = "isImportDB"];
  repeated uint64              SignersIndexes = 10 [(gogoproto.jsontag) = "signersIndexes,omitempty"];
  uint64                       HighestFinalBlockNonce = 11 [(gogoproto.jsontag) = "highestFinalBlockNonce"];
  bytes                        HighestFinalBlockHash = 12 [(gogoproto.jsontag) = "highestFinalBlockHash,omitempty"];
}

message TransactionPool {
  map<string, TxInfo>     Transactions = 1 [(gogoproto.jsontag) = "transactions,omitempty"];
  map<string, SCRInfo>    SmartContractResults = 2 [(gogoproto.jsontag) = "smartContractResults,omitempty"];
  map<string, RewardInfo> Rewards = 3 [(gogoproto.jsontag) = "rewards,omitempty"];
  map<string, Receipt>    Receipts = 4 [(gogoproto.jsontag) = "receipts,omitempty"];
  map<string, TxInfo>     InvalidTxs = 5 [(gogoproto.jsontag) = "invalidTxs,omitempty"];
  map<string, Log>        Logs = 6 [(gogoproto.jsontag) = "logs,omitempty"];
  repeated string         ScheduledExecutedSCRSHashesPrevBlock = 7 [(gogoproto.jsontag) = "scheduledExecutedSCRSHashesPrevBlock,omitempty"];
  repeated string         ScheduledExecutedInvalidTxsHashesPrevBlock = 8 [(gogoproto.jsontag) = "ScheduledExecutedInvalidTxsHashesPrevBlock,omitempty"];
}

message FeeInfo {
  uint64 GasUsed = 1 [(gogoproto.jsontag) = "gasUsed"];
  bytes  Fee = 2 [(gogoproto.jsontag) = "fee,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
  bytes  InitialPaidFee = 3 [(gogoproto.jsontag) = "initialPaidFee,omitempty", (gogoproto.casttypewith) = "math/big.Int;github.com/multiversx/mx-chain-core-go/data.BigIntCaster"];
}

message TxInfo {
  Transaction Transaction = 1 [(gogoproto.jsontag) = "transaction,omitempty"];
  FeeInfo     FeeInfo = 2 [(gogoproto.jsontag) = "feeInfo,omitempty"];
  uint32      ExecutionOrder = 3 [(gogoproto.jsontag) = "executionOrder"];
}

message SCRInfo {
  SmartContractResult SmartContractResult = 1 [(gogoproto.jsontag) = "smartContractResult,omitempty"];
  FeeInfo             FeeInfo = 2 [(gogoproto.jsontag) = "feeInfo,omitempty"];
  uint32              ExecutionOrder = 3 [(gogoproto.jsontag) = "executionOrder"];
}

message RewardInfo {
  RewardTx Reward = 1 [(gogoproto.jsontag) = "reward,omitempty"];
  uint32   ExecutionOrder = 2 [(gogoproto.jsontag) = "executionOrder"];
}

message HeaderGasConsumption {
  uint64 GasProvided = 1 [(gogoproto.jsontag) = "gasProvided"];
  uint64 GasRefunded = 2 [(gogoproto.jsontag) = "gasRefunded"];
  uint64 GasPenalized = 3 [(gogoproto.jsontag) = "gasPenalized"];
  uint64 MaxGasPerBlock = 4 [(gogoproto.jsontag) = "maxGasPerBlock"];
}

message ValidatorRatingInfo {
  string  PublicKey = 1 [(gogoproto.jsontag) = "publicKey,omitempty"];
  float   Rating   = 2 [(gogoproto.jsontag) = "rating,omitempty"];
}

message RoundInfo {
  uint64 Index  = 1 [(gogoproto.jsontag) = "index"];
  repeated uint64 SignersIndexes   = 2 [(gogoproto.jsontag) = "signersIndexes,omitempty"];
  bool BlockWasProposed = 3 [(gogoproto.jsontag) = "blockWasProposed"];
  uint32 ShardId          = 4 [(gogoproto.jsontag) = "shardId"];
  uint32 Epoch          = 5 [(gogoproto.jsontag) = "epoch"];
  uint64 Timestamp        = 6 [(gogoproto.jsontag) = "timestamp"];
}
